
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080015c  0080015c  00000cd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b8  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b80  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b83  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087f  00000000  00000000  0000431f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 35       	cpi	r26, 0x5F	; 95
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 02 	call	0x540	; 0x540 <main>
  9e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_Init>:
#define DHT11_DDR DDRC
#define DHT11_PORT PORTC
#define DHT11_PIN_INPUT PINC

void DHT11_Init(void) {
	DHT11_DDR |= (1 << DHT11_PIN); // Configura el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	DHT11_PORT |= (1 << DHT11_PIN); // Establece el pin en alto
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <DHT11_Read>:
}

uint8_t DHT11_Read(float *temperature, float *humidity) {
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	27 97       	sbiw	r28, 0x07	; 7
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	9f 83       	std	Y+7, r25	; 0x07
  d6:	8e 83       	std	Y+6, r24	; 0x06
  d8:	7b 01       	movw	r14, r22
	uint8_t bits[5] = {0}; // Asegurarse de inicializar los bits a 0
  da:	fe 01       	movw	r30, r28
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	df 01       	movw	r26, r30
  e2:	1d 92       	st	X+, r1
  e4:	8a 95       	dec	r24
  e6:	e9 f7       	brne	.-6      	; 0xe2 <DHT11_Read+0x2e>
	uint8_t i, j = 0;

	// Enviar señal de inicio: Señal baja por 18 ms
	DHT11_PORT &= ~(1 << DHT11_PIN);
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	fc e8       	ldi	r31, 0x8C	; 140
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <DHT11_Read+0x3e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <DHT11_Read+0x44>
  f8:	00 00       	nop
	_delay_ms(18);
	// MCU envía señal alta por 20-40 us para esperar que se prepare el DHT11
	DHT11_PORT |= (1 << DHT11_PIN);
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	f5 e3       	ldi	r31, 0x35	; 53
 102:	fa 95       	dec	r31
 104:	f1 f7       	brne	.-4      	; 0x102 <DHT11_Read+0x4e>
 106:	00 00       	nop
	_delay_us(20);

	// Configura el pin como ENTRADA para LEER la respuesta del DHT11
	DHT11_DDR &= ~(1 << DHT11_PIN);
 108:	87 b1       	in	r24, 0x07	; 7
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	87 b9       	out	0x07, r24	; 7
	
	// Espera a que el pin se ponga bajo (máximo 80 us)
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 10e:	30 99       	sbic	0x06, 0	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <DHT11_Read+0x5a>
	//_delay_us(80);

	// Espera a que el pin se ponga alto (máximo 80 us)
	while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 112:	30 9b       	sbis	0x06, 0	; 6
 114:	fe cf       	rjmp	.-4      	; 0x112 <DHT11_Read+0x5e>
	//_delay_us(80);

	// Espera a que el pin se ponga bajo nuevamente
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 116:	96 b1       	in	r25, 0x06	; 6
 118:	19 2f       	mov	r17, r25
 11a:	11 70       	andi	r17, 0x01	; 1
 11c:	90 fd       	sbrc	r25, 0
 11e:	fb cf       	rjmp	.-10     	; 0x116 <DHT11_Read+0x62>
 120:	e0 e0       	ldi	r30, 0x00	; 0
 122:	24 c0       	rjmp	.+72     	; 0x16c <DHT11_Read+0xb8>
	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
		uint8_t result = 0;
		for (i = 0; i < 8; i++) {
			// Espera a que el pin se ponga alto
			while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 124:	30 9b       	sbis	0x06, 0	; 6
 126:	fe cf       	rjmp	.-4      	; 0x124 <DHT11_Read+0x70>
 128:	8a e6       	ldi	r24, 0x6A	; 106
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <DHT11_Read+0x76>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <DHT11_Read+0x7c>
			// -En alto: bit = 1
			// -En bajo: bit = 0
			// Como result se inicializa con todo en 0, no hace falta
			// especificar que se le esta asignando un 0 a la posicion i
			// Solo se asigna 1 cuando es necesario
			if (DHT11_PIN_INPUT & (1 << DHT11_PIN)) {
 130:	30 9b       	sbis	0x06, 0	; 6
 132:	0c c0       	rjmp	.+24     	; 0x14c <DHT11_Read+0x98>
				result |= (1 << (7 - i)); // Establece el bit 'i' en 1
 134:	47 e0       	ldi	r20, 0x07	; 7
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	49 1b       	sub	r20, r25
 13a:	51 09       	sbc	r21, r1
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DHT11_Read+0x92>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	4a 95       	dec	r20
 148:	e2 f7       	brpl	.-8      	; 0x142 <DHT11_Read+0x8e>
 14a:	72 2b       	or	r23, r18
			}

			// Espera a que el pin se ponga bajo
			while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 14c:	30 99       	sbic	0x06, 0	; 6
 14e:	fe cf       	rjmp	.-4      	; 0x14c <DHT11_Read+0x98>
	//_delay_us(50);

	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
		uint8_t result = 0;
		for (i = 0; i < 8; i++) {
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	02 c0       	rjmp	.+4      	; 0x158 <DHT11_Read+0xa4>
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	98 30       	cpi	r25, 0x08	; 8
 15a:	20 f3       	brcs	.-56     	; 0x124 <DHT11_Read+0x70>
			}

			// Espera a que el pin se ponga bajo
			while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
		}
		bits[j] = result;
 15c:	a1 e0       	ldi	r26, 0x01	; 1
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ac 0f       	add	r26, r28
 162:	bd 1f       	adc	r27, r29
 164:	ae 0f       	add	r26, r30
 166:	b1 1d       	adc	r27, r1
 168:	7c 93       	st	X, r23
	// Espera a que el pin se ponga bajo nuevamente
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
	//_delay_us(50);

	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
 16a:	ef 5f       	subi	r30, 0xFF	; 255
 16c:	e5 30       	cpi	r30, 0x05	; 5
 16e:	90 f3       	brcs	.-28     	; 0x154 <DHT11_Read+0xa0>
		}
		bits[j] = result;
	}
	
	// Espera a que el pin se ponga alto
	while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 170:	30 9b       	sbis	0x06, 0	; 6
 172:	fe cf       	rjmp	.-4      	; 0x170 <DHT11_Read+0xbc>

	// Configura el pin como salida y lo establece en alto
	DHT11_DDR |= (1 << DHT11_PIN);
 174:	87 b1       	in	r24, 0x07	; 7
 176:	81 60       	ori	r24, 0x01	; 1
 178:	87 b9       	out	0x07, r24	; 7
	DHT11_PORT |= (1 << DHT11_PIN);
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	88 b9       	out	0x08, r24	; 8

	// Verificación de la suma de comprobación
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) {
 180:	69 81       	ldd	r22, Y+1	; 0x01
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	0b 81       	ldd	r16, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	86 0f       	add	r24, r22
 18a:	80 0f       	add	r24, r16
 18c:	89 0f       	add	r24, r25
 18e:	9d 81       	ldd	r25, Y+5	; 0x05
 190:	89 13       	cpse	r24, r25
 192:	1a c0       	rjmp	.+52     	; 0x1c8 <DHT11_Read+0x114>
 194:	67 01       	movw	r12, r14
 196:	ee 80       	ldd	r14, Y+6	; 0x06
 198:	ff 80       	ldd	r15, Y+7	; 0x07
		return 1; // Error: la suma de comprobación no coincide
	}

	// Conversión de los datos leídos
	*humidity = bits[0];
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 b9 02 	call	0x572	; 0x572 <__floatunsisf>
 1a4:	d6 01       	movw	r26, r12
 1a6:	6d 93       	st	X+, r22
 1a8:	7d 93       	st	X+, r23
 1aa:	8d 93       	st	X+, r24
 1ac:	9c 93       	st	X, r25
 1ae:	13 97       	sbiw	r26, 0x03	; 3
	*temperature = bits[2];
 1b0:	60 2f       	mov	r22, r16
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 b9 02 	call	0x572	; 0x572 <__floatunsisf>
 1bc:	f7 01       	movw	r30, r14
 1be:	60 83       	st	Z, r22
 1c0:	71 83       	std	Z+1, r23	; 0x01
 1c2:	82 83       	std	Z+2, r24	; 0x02
 1c4:	93 83       	std	Z+3, r25	; 0x03

	return 0; // Lectura exitosa
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <DHT11_Read+0x116>
	DHT11_DDR |= (1 << DHT11_PIN);
	DHT11_PORT |= (1 << DHT11_PIN);

	// Verificación de la suma de comprobación
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) {
		return 1; // Error: la suma de comprobación no coincide
 1c8:	11 e0       	ldi	r17, 0x01	; 1
	// Conversión de los datos leídos
	*humidity = bits[0];
	*temperature = bits[2];

	return 0; // Lectura exitosa
 1ca:	81 2f       	mov	r24, r17
 1cc:	27 96       	adiw	r28, 0x07	; 7
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <I2C_Init>:
#include <avr/io.h>
#include <util/twi.h>
#include <DS3231.h>

void I2C_Init(void) {
	TWSR = 0x00;
 1ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x47;
 1ee:	87 e4       	ldi	r24, 0x47	; 71
 1f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fa:	08 95       	ret

000001fc <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 1fc:	84 ea       	ldi	r24, 0xA4	; 164
 1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 206:	88 23       	and	r24, r24
 208:	e4 f7       	brge	.-8      	; 0x202 <I2C_Start+0x6>
}
 20a:	08 95       	ret

0000020c <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 20c:	84 e9       	ldi	r24, 0x94	; 148
 20e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 212:	08 95       	ret

00000214 <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 218:	84 e8       	ldi	r24, 0x84	; 132
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 222:	88 23       	and	r24, r24
 224:	e4 f7       	brge	.-8      	; 0x21e <I2C_Write+0xa>
}
 226:	08 95       	ret

00000228 <I2C_Read_Ack>:

uint8_t I2C_Read_Ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 228:	84 ec       	ldi	r24, 0xC4	; 196
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 22e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 232:	88 23       	and	r24, r24
 234:	e4 f7       	brge	.-8      	; 0x22e <I2C_Read_Ack+0x6>
	return TWDR;
 236:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 23a:	08 95       	ret

0000023c <I2C_Read_NAck>:

uint8_t I2C_Read_NAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
 23c:	84 e8       	ldi	r24, 0x84	; 132
 23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 242:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 246:	88 23       	and	r24, r24
 248:	e4 f7       	brge	.-8      	; 0x242 <I2C_Read_NAck+0x6>
	return TWDR;
 24a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 24e:	08 95       	ret

00000250 <DS3231_GetTime>:

void DS3231_GetTime(uint8_t *hour, uint8_t *minute, uint8_t *second) {
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	8b 01       	movw	r16, r22
 260:	7a 01       	movw	r14, r20
	I2C_Start();
 262:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 266:	80 ed       	ldi	r24, 0xD0	; 208
 268:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	I2C_Write(0x00);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	I2C_Start();
 272:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 276:	81 ed       	ldi	r24, 0xD1	; 209
 278:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	*second = I2C_Read_Ack();
 27c:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Read_Ack>
 280:	f7 01       	movw	r30, r14
 282:	80 83       	st	Z, r24
	*minute = I2C_Read_Ack();
 284:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Read_Ack>
 288:	f8 01       	movw	r30, r16
 28a:	80 83       	st	Z, r24
	*hour = I2C_Read_NAck();
 28c:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_Read_NAck>
 290:	88 83       	st	Y, r24
	I2C_Stop();
 292:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Stop>
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <DS3231_GetDate>:

void DS3231_GetDate(uint8_t *day, uint8_t *month, uint8_t *year) {
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	7c 01       	movw	r14, r24
 2b2:	8b 01       	movw	r16, r22
 2b4:	ea 01       	movw	r28, r20
	I2C_Start();
 2b6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 2ba:	80 ed       	ldi	r24, 0xD0	; 208
 2bc:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	I2C_Write(0x04);
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	I2C_Start();
 2c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 2ca:	81 ed       	ldi	r24, 0xD1	; 209
 2cc:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
	*day = I2C_Read_Ack();
 2d0:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Read_Ack>
 2d4:	f7 01       	movw	r30, r14
 2d6:	80 83       	st	Z, r24
	*month = I2C_Read_Ack();
 2d8:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Read_Ack>
 2dc:	f8 01       	movw	r30, r16
 2de:	80 83       	st	Z, r24
	*year = I2C_Read_NAck();
 2e0:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_Read_NAck>
 2e4:	88 83       	st	Y, r24
	I2C_Stop();
 2e6:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Stop>
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <SerialPort_Init>:
 2f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2fc:	96 e0       	ldi	r25, 0x06	; 6
 2fe:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 302:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 306:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 30a:	08 95       	ret

0000030c <SerialPort_TX_Enable>:
 30c:	e1 ec       	ldi	r30, 0xC1	; 193
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	88 60       	ori	r24, 0x08	; 8
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <SerialPort_RX_Enable>:
 318:	e1 ec       	ldi	r30, 0xC1	; 193
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <SerialPort_RX_Interrupt_Enable>:
 324:	e1 ec       	ldi	r30, 0xC1	; 193
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret

00000330 <SerialPort_Wait_For_TX_Buffer_Free>:
 330:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 334:	85 ff       	sbrs	r24, 5
 336:	fc cf       	rjmp	.-8      	; 0x330 <SerialPort_Wait_For_TX_Buffer_Free>
 338:	08 95       	ret

0000033a <SerialPort_Send_Data>:
 33a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 33e:	08 95       	ret

00000340 <SerialPort_Send_String>:
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	7c 01       	movw	r14, r24
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	07 c0       	rjmp	.+14     	; 0x35e <SerialPort_Send_String+0x1e>
 350:	0e 94 98 01 	call	0x330	; 0x330 <SerialPort_Wait_For_TX_Buffer_Free>
 354:	f8 01       	movw	r30, r16
 356:	80 81       	ld	r24, Z
 358:	0e 94 9d 01 	call	0x33a	; 0x33a <SerialPort_Send_Data>
 35c:	cf 5f       	subi	r28, 0xFF	; 255
 35e:	87 01       	movw	r16, r14
 360:	0c 0f       	add	r16, r28
 362:	11 1d       	adc	r17, r1
 364:	f8 01       	movw	r30, r16
 366:	80 81       	ld	r24, Z
 368:	81 11       	cpse	r24, r1
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <SerialPort_Send_String+0x10>
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <Task_TemHum>:
#include <stdio.h>

extern volatile uint8_t Flag_SendData;
extern char msg2[];

void Task_TemHum(void) {
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	c2 57       	subi	r28, 0x72	; 114
 382:	d1 09       	sbc	r29, r1
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0;
 38e:	19 82       	std	Y+1, r1	; 0x01
 390:	1a 82       	std	Y+2, r1	; 0x02
 392:	1b 82       	std	Y+3, r1	; 0x03
 394:	1c 82       	std	Y+4, r1	; 0x04
	float humidity = 0;
 396:	1d 82       	std	Y+5, r1	; 0x05
 398:	1e 82       	std	Y+6, r1	; 0x06
 39a:	1f 82       	std	Y+7, r1	; 0x07
 39c:	18 86       	std	Y+8, r1	; 0x08

	if (DHT11_Read(&temperature, &humidity) == 0) {
 39e:	be 01       	movw	r22, r28
 3a0:	6b 5f       	subi	r22, 0xFB	; 251
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DHT11_Read>
 3ac:	81 11       	cpse	r24, r1
 3ae:	5e c0       	rjmp	.+188    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		char buffer[100];
		uint8_t hour, minute, second, day, month, year;
		DS3231_GetTime(&hour, &minute, &second);
 3b0:	ae 01       	movw	r20, r28
 3b2:	40 59       	subi	r20, 0x90	; 144
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
 3b6:	be 01       	movw	r22, r28
 3b8:	6f 58       	subi	r22, 0x8F	; 143
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	ce 01       	movw	r24, r28
 3be:	8e 58       	subi	r24, 0x8E	; 142
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	0e 94 28 01 	call	0x250	; 0x250 <DS3231_GetTime>
		DS3231_GetDate(&day, &month, &year);
 3c6:	ae 01       	movw	r20, r28
 3c8:	43 59       	subi	r20, 0x93	; 147
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	be 01       	movw	r22, r28
 3ce:	62 59       	subi	r22, 0x92	; 146
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	ce 01       	movw	r24, r28
 3d4:	81 59       	subi	r24, 0x91	; 145
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DS3231_GetDate>

		//while (1); //nunca entra aca

		snprintf(buffer, sizeof(buffer),
 3dc:	e1 96       	adiw	r28, 0x31	; 49
 3de:	8f ad       	ldd	r24, Y+63	; 0x3f
 3e0:	e1 97       	sbiw	r28, 0x31	; 49
 3e2:	1f 92       	push	r1
 3e4:	8f 93       	push	r24
 3e6:	e2 96       	adiw	r28, 0x32	; 50
 3e8:	8f ad       	ldd	r24, Y+63	; 0x3f
 3ea:	e2 97       	sbiw	r28, 0x32	; 50
 3ec:	1f 92       	push	r1
 3ee:	8f 93       	push	r24
 3f0:	e3 96       	adiw	r28, 0x33	; 51
 3f2:	8f ad       	ldd	r24, Y+63	; 0x3f
 3f4:	e3 97       	sbiw	r28, 0x33	; 51
 3f6:	1f 92       	push	r1
 3f8:	8f 93       	push	r24
 3fa:	ae 96       	adiw	r28, 0x2e	; 46
 3fc:	8f ad       	ldd	r24, Y+63	; 0x3f
 3fe:	ae 97       	sbiw	r28, 0x2e	; 46
 400:	1f 92       	push	r1
 402:	8f 93       	push	r24
 404:	af 96       	adiw	r28, 0x2f	; 47
 406:	8f ad       	ldd	r24, Y+63	; 0x3f
 408:	af 97       	sbiw	r28, 0x2f	; 47
 40a:	1f 92       	push	r1
 40c:	8f 93       	push	r24
 40e:	e0 96       	adiw	r28, 0x30	; 48
 410:	8f ad       	ldd	r24, Y+63	; 0x3f
 412:	e0 97       	sbiw	r28, 0x30	; 48
 414:	1f 92       	push	r1
 416:	8f 93       	push	r24
 418:	88 85       	ldd	r24, Y+8	; 0x08
 41a:	8f 93       	push	r24
 41c:	8f 81       	ldd	r24, Y+7	; 0x07
 41e:	8f 93       	push	r24
 420:	8e 81       	ldd	r24, Y+6	; 0x06
 422:	8f 93       	push	r24
 424:	8d 81       	ldd	r24, Y+5	; 0x05
 426:	8f 93       	push	r24
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	8f 93       	push	r24
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	8f 93       	push	r24
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	8f 93       	push	r24
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	8f 93       	push	r24
 438:	88 e1       	ldi	r24, 0x18	; 24
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	1f 92       	push	r1
 442:	84 e6       	ldi	r24, 0x64	; 100
 444:	8f 93       	push	r24
 446:	ce 01       	movw	r24, r28
 448:	09 96       	adiw	r24, 0x09	; 9
 44a:	9f 93       	push	r25
 44c:	8f 93       	push	r24
 44e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <snprintf>
		"TEMP: %f°C HUM: %f%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
		temperature, humidity, day, month, year, hour, minute, second);

		if (Flag_SendData) {
 452:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Flag_SendData>
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	88 23       	and	r24, r24
 462:	21 f0       	breq	.+8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			SerialPort_Send_String(buffer);
 464:	ce 01       	movw	r24, r28
 466:	09 96       	adiw	r24, 0x09	; 9
 468:	0e 94 a0 01 	call	0x340	; 0x340 <SerialPort_Send_String>
		}
		//while (1);
	}
}
 46c:	ce 58       	subi	r28, 0x8E	; 142
 46e:	df 4f       	sbci	r29, 0xFF	; 255
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <__vector_18>:

ISR(USART_RX_vect) {
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	static volatile uint8_t RX_Buffer = 0;
	RX_Buffer = UDR0; // Read received data
 4a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>

	if (RX_Buffer == 's' || RX_Buffer == 'S') {
 4aa:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4ae:	83 37       	cpi	r24, 0x73	; 115
 4b0:	21 f0       	breq	.+8      	; 0x4ba <__vector_18+0x3a>
 4b2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4b6:	83 35       	cpi	r24, 0x53	; 83
 4b8:	79 f4       	brne	.+30     	; 0x4d8 <__vector_18+0x58>
		Flag_SendData = !Flag_SendData; // Toggle data sending
 4ba:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <Flag_SendData>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	91 11       	cpse	r25, r1
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Flag_SendData>
		if (!Flag_SendData) {
 4c8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Flag_SendData>
 4cc:	81 11       	cpse	r24, r1
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__vector_18+0x58>
			SerialPort_Send_String(msg2);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 a0 01 	call	0x340	; 0x340 <SerialPort_Send_String>
		}
	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <Timer1_Init>:

volatile uint8_t Flag_TemHum = 0;

void Timer1_Init(void) {
	// Configurar Timer1 en modo CTC
	TCCR1B |= (1 << WGM12); // Modo CTC
 4fa:	e1 e8       	ldi	r30, 0x81	; 129
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	88 60       	ori	r24, 0x08	; 8
 502:	80 83       	st	Z, r24
	
	// Establecer el valor de comparación para 2 segundos
	OCR1A = 15625 - 1; // 31250 cuentas para 2 segundos con prescaler 1024
 504:	88 e0       	ldi	r24, 0x08	; 8
 506:	9d e3       	ldi	r25, 0x3D	; 61
 508:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 50c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Habilitar la interrupción por comparación de salida A
	TIMSK1 |= (1 << OCIE1A);
 510:	af e6       	ldi	r26, 0x6F	; 111
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	8c 91       	ld	r24, X
 516:	82 60       	ori	r24, 0x02	; 2
 518:	8c 93       	st	X, r24
	
	// Configurar el prescaler a 1024 y arrancar el temporizador
	TCCR1B |= (1 << CS12) | (1 << CS10);
 51a:	80 81       	ld	r24, Z
 51c:	85 60       	ori	r24, 0x05	; 5
 51e:	80 83       	st	Z, r24
 520:	08 95       	ret

00000522 <__vector_11>:
}

// ISR para el evento de comparación del Timer1
ISR(TIMER1_COMPA_vect) {
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	8f 93       	push	r24
	Flag_TemHum = 1;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <Flag_TemHum>
}
 534:	8f 91       	pop	r24
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <main>:
int main(void)
{
    // Inicializacion
	
	// Inicialización de los módulos
	SerialPort_Init(103); // 9600 bps con un reloj de 16MHz
 540:	87 e6       	ldi	r24, 0x67	; 103
 542:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SerialPort_Init>
	SerialPort_TX_Enable();
 546:	0e 94 86 01 	call	0x30c	; 0x30c <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 54a:	0e 94 8c 01 	call	0x318	; 0x318 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 54e:	0e 94 92 01 	call	0x324	; 0x324 <SerialPort_RX_Interrupt_Enable>
	
	// Inicialización del Timer1
	Timer1_Init();
 552:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Timer1_Init>
	
	// inicializacion de dht11 y ds3231
	DHT11_Init();
 556:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Init>
	I2C_Init();	
 55a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Init>
	
	sei();
 55e:	78 94       	sei
	
    while (1) {
	    
		if (Flag_TemHum) {
 560:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <Flag_TemHum>
 564:	88 23       	and	r24, r24
 566:	e1 f3       	breq	.-8      	; 0x560 <main+0x20>
		    Task_TemHum();
 568:	0e 94 bc 01 	call	0x378	; 0x378 <Task_TemHum>
		    Flag_TemHum = 0;
 56c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <Flag_TemHum>
 570:	f7 cf       	rjmp	.-18     	; 0x560 <main+0x20>

00000572 <__floatunsisf>:
 572:	e8 94       	clt
 574:	09 c0       	rjmp	.+18     	; 0x588 <__floatsisf+0x12>

00000576 <__floatsisf>:
 576:	97 fb       	bst	r25, 7
 578:	3e f4       	brtc	.+14     	; 0x588 <__floatsisf+0x12>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	99 23       	and	r25, r25
 58a:	a9 f0       	breq	.+42     	; 0x5b6 <__floatsisf+0x40>
 58c:	f9 2f       	mov	r31, r25
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	bb 27       	eor	r27, r27
 592:	93 95       	inc	r25
 594:	f6 95       	lsr	r31
 596:	87 95       	ror	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f1 11       	cpse	r31, r1
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <__floatsisf+0x1c>
 5a2:	fa f4       	brpl	.+62     	; 0x5e2 <__floatsisf+0x6c>
 5a4:	bb 0f       	add	r27, r27
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__floatsisf+0x36>
 5a8:	60 ff       	sbrs	r22, 0
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <__floatsisf+0x6c>
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <__floatsisf+0x6c>
 5b6:	88 23       	and	r24, r24
 5b8:	11 f0       	breq	.+4      	; 0x5be <__floatsisf+0x48>
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <__floatsisf+0x6a>
 5be:	77 23       	and	r23, r23
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__floatsisf+0x54>
 5c2:	9e e8       	ldi	r25, 0x8E	; 142
 5c4:	87 2f       	mov	r24, r23
 5c6:	76 2f       	mov	r23, r22
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__floatsisf+0x5e>
 5ca:	66 23       	and	r22, r22
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__floatsisf+0x74>
 5ce:	96 e8       	ldi	r25, 0x86	; 134
 5d0:	86 2f       	mov	r24, r22
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	2a f0       	brmi	.+10     	; 0x5e2 <__floatsisf+0x6c>
 5d8:	9a 95       	dec	r25
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	da f7       	brpl	.-10     	; 0x5d8 <__floatsisf+0x62>
 5e2:	88 0f       	add	r24, r24
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <snprintf>:
 5ec:	ae e0       	ldi	r26, 0x0E	; 14
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	ec ef       	ldi	r30, 0xFC	; 252
 5f2:	f2 e0       	ldi	r31, 0x02	; 2
 5f4:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__prologue_saves__+0x1c>
 5f8:	0d 89       	ldd	r16, Y+21	; 0x15
 5fa:	1e 89       	ldd	r17, Y+22	; 0x16
 5fc:	8f 89       	ldd	r24, Y+23	; 0x17
 5fe:	98 8d       	ldd	r25, Y+24	; 0x18
 600:	26 e0       	ldi	r18, 0x06	; 6
 602:	2c 83       	std	Y+4, r18	; 0x04
 604:	1a 83       	std	Y+2, r17	; 0x02
 606:	09 83       	std	Y+1, r16	; 0x01
 608:	97 ff       	sbrs	r25, 7
 60a:	02 c0       	rjmp	.+4      	; 0x610 <snprintf+0x24>
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e8       	ldi	r25, 0x80	; 128
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	9e 83       	std	Y+6, r25	; 0x06
 614:	8d 83       	std	Y+5, r24	; 0x05
 616:	ae 01       	movw	r20, r28
 618:	45 5e       	subi	r20, 0xE5	; 229
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	69 8d       	ldd	r22, Y+25	; 0x19
 61e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 620:	ce 01       	movw	r24, r28
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	0e 94 26 03 	call	0x64c	; 0x64c <vfprintf>
 628:	4d 81       	ldd	r20, Y+5	; 0x05
 62a:	5e 81       	ldd	r21, Y+6	; 0x06
 62c:	57 fd       	sbrc	r21, 7
 62e:	0a c0       	rjmp	.+20     	; 0x644 <snprintf+0x58>
 630:	2f 81       	ldd	r18, Y+7	; 0x07
 632:	38 85       	ldd	r19, Y+8	; 0x08
 634:	42 17       	cp	r20, r18
 636:	53 07       	cpc	r21, r19
 638:	0c f4       	brge	.+2      	; 0x63c <snprintf+0x50>
 63a:	9a 01       	movw	r18, r20
 63c:	f8 01       	movw	r30, r16
 63e:	e2 0f       	add	r30, r18
 640:	f3 1f       	adc	r31, r19
 642:	10 82       	st	Z, r1
 644:	2e 96       	adiw	r28, 0x0e	; 14
 646:	e4 e0       	ldi	r30, 0x04	; 4
 648:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__epilogue_restores__+0x1c>

0000064c <vfprintf>:
 64c:	ab e0       	ldi	r26, 0x0B	; 11
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	ec e2       	ldi	r30, 0x2C	; 44
 652:	f3 e0       	ldi	r31, 0x03	; 3
 654:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__prologue_saves__>
 658:	6c 01       	movw	r12, r24
 65a:	7b 01       	movw	r14, r22
 65c:	8a 01       	movw	r16, r20
 65e:	fc 01       	movw	r30, r24
 660:	17 82       	std	Z+7, r1	; 0x07
 662:	16 82       	std	Z+6, r1	; 0x06
 664:	83 81       	ldd	r24, Z+3	; 0x03
 666:	81 ff       	sbrs	r24, 1
 668:	cc c1       	rjmp	.+920    	; 0xa02 <__stack+0x103>
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	3c 01       	movw	r6, r24
 670:	f6 01       	movw	r30, r12
 672:	93 81       	ldd	r25, Z+3	; 0x03
 674:	f7 01       	movw	r30, r14
 676:	93 fd       	sbrc	r25, 3
 678:	85 91       	lpm	r24, Z+
 67a:	93 ff       	sbrs	r25, 3
 67c:	81 91       	ld	r24, Z+
 67e:	7f 01       	movw	r14, r30
 680:	88 23       	and	r24, r24
 682:	09 f4       	brne	.+2      	; 0x686 <vfprintf+0x3a>
 684:	ba c1       	rjmp	.+884    	; 0x9fa <__stack+0xfb>
 686:	85 32       	cpi	r24, 0x25	; 37
 688:	39 f4       	brne	.+14     	; 0x698 <vfprintf+0x4c>
 68a:	93 fd       	sbrc	r25, 3
 68c:	85 91       	lpm	r24, Z+
 68e:	93 ff       	sbrs	r25, 3
 690:	81 91       	ld	r24, Z+
 692:	7f 01       	movw	r14, r30
 694:	85 32       	cpi	r24, 0x25	; 37
 696:	29 f4       	brne	.+10     	; 0x6a2 <vfprintf+0x56>
 698:	b6 01       	movw	r22, r12
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 6a0:	e7 cf       	rjmp	.-50     	; 0x670 <vfprintf+0x24>
 6a2:	91 2c       	mov	r9, r1
 6a4:	21 2c       	mov	r2, r1
 6a6:	31 2c       	mov	r3, r1
 6a8:	ff e1       	ldi	r31, 0x1F	; 31
 6aa:	f3 15       	cp	r31, r3
 6ac:	d8 f0       	brcs	.+54     	; 0x6e4 <vfprintf+0x98>
 6ae:	8b 32       	cpi	r24, 0x2B	; 43
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <vfprintf+0x84>
 6b2:	38 f4       	brcc	.+14     	; 0x6c2 <vfprintf+0x76>
 6b4:	80 32       	cpi	r24, 0x20	; 32
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <vfprintf+0x8a>
 6b8:	83 32       	cpi	r24, 0x23	; 35
 6ba:	a1 f4       	brne	.+40     	; 0x6e4 <vfprintf+0x98>
 6bc:	23 2d       	mov	r18, r3
 6be:	20 61       	ori	r18, 0x10	; 16
 6c0:	1d c0       	rjmp	.+58     	; 0x6fc <vfprintf+0xb0>
 6c2:	8d 32       	cpi	r24, 0x2D	; 45
 6c4:	61 f0       	breq	.+24     	; 0x6de <vfprintf+0x92>
 6c6:	80 33       	cpi	r24, 0x30	; 48
 6c8:	69 f4       	brne	.+26     	; 0x6e4 <vfprintf+0x98>
 6ca:	23 2d       	mov	r18, r3
 6cc:	21 60       	ori	r18, 0x01	; 1
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <vfprintf+0xb0>
 6d0:	83 2d       	mov	r24, r3
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	38 2e       	mov	r3, r24
 6d6:	e3 2d       	mov	r30, r3
 6d8:	e4 60       	ori	r30, 0x04	; 4
 6da:	3e 2e       	mov	r3, r30
 6dc:	2a c0       	rjmp	.+84     	; 0x732 <vfprintf+0xe6>
 6de:	f3 2d       	mov	r31, r3
 6e0:	f8 60       	ori	r31, 0x08	; 8
 6e2:	1d c0       	rjmp	.+58     	; 0x71e <vfprintf+0xd2>
 6e4:	37 fc       	sbrc	r3, 7
 6e6:	2d c0       	rjmp	.+90     	; 0x742 <vfprintf+0xf6>
 6e8:	20 ed       	ldi	r18, 0xD0	; 208
 6ea:	28 0f       	add	r18, r24
 6ec:	2a 30       	cpi	r18, 0x0A	; 10
 6ee:	40 f0       	brcs	.+16     	; 0x700 <vfprintf+0xb4>
 6f0:	8e 32       	cpi	r24, 0x2E	; 46
 6f2:	b9 f4       	brne	.+46     	; 0x722 <vfprintf+0xd6>
 6f4:	36 fc       	sbrc	r3, 6
 6f6:	81 c1       	rjmp	.+770    	; 0x9fa <__stack+0xfb>
 6f8:	23 2d       	mov	r18, r3
 6fa:	20 64       	ori	r18, 0x40	; 64
 6fc:	32 2e       	mov	r3, r18
 6fe:	19 c0       	rjmp	.+50     	; 0x732 <vfprintf+0xe6>
 700:	36 fe       	sbrs	r3, 6
 702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0xc4>
 704:	8a e0       	ldi	r24, 0x0A	; 10
 706:	98 9e       	mul	r9, r24
 708:	20 0d       	add	r18, r0
 70a:	11 24       	eor	r1, r1
 70c:	92 2e       	mov	r9, r18
 70e:	11 c0       	rjmp	.+34     	; 0x732 <vfprintf+0xe6>
 710:	ea e0       	ldi	r30, 0x0A	; 10
 712:	2e 9e       	mul	r2, r30
 714:	20 0d       	add	r18, r0
 716:	11 24       	eor	r1, r1
 718:	22 2e       	mov	r2, r18
 71a:	f3 2d       	mov	r31, r3
 71c:	f0 62       	ori	r31, 0x20	; 32
 71e:	3f 2e       	mov	r3, r31
 720:	08 c0       	rjmp	.+16     	; 0x732 <vfprintf+0xe6>
 722:	8c 36       	cpi	r24, 0x6C	; 108
 724:	21 f4       	brne	.+8      	; 0x72e <vfprintf+0xe2>
 726:	83 2d       	mov	r24, r3
 728:	80 68       	ori	r24, 0x80	; 128
 72a:	38 2e       	mov	r3, r24
 72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0xe6>
 72e:	88 36       	cpi	r24, 0x68	; 104
 730:	41 f4       	brne	.+16     	; 0x742 <vfprintf+0xf6>
 732:	f7 01       	movw	r30, r14
 734:	93 fd       	sbrc	r25, 3
 736:	85 91       	lpm	r24, Z+
 738:	93 ff       	sbrs	r25, 3
 73a:	81 91       	ld	r24, Z+
 73c:	7f 01       	movw	r14, r30
 73e:	81 11       	cpse	r24, r1
 740:	b3 cf       	rjmp	.-154    	; 0x6a8 <vfprintf+0x5c>
 742:	98 2f       	mov	r25, r24
 744:	9f 7d       	andi	r25, 0xDF	; 223
 746:	95 54       	subi	r25, 0x45	; 69
 748:	93 30       	cpi	r25, 0x03	; 3
 74a:	28 f4       	brcc	.+10     	; 0x756 <vfprintf+0x10a>
 74c:	0c 5f       	subi	r16, 0xFC	; 252
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	9f e3       	ldi	r25, 0x3F	; 63
 752:	99 83       	std	Y+1, r25	; 0x01
 754:	0d c0       	rjmp	.+26     	; 0x770 <vfprintf+0x124>
 756:	83 36       	cpi	r24, 0x63	; 99
 758:	31 f0       	breq	.+12     	; 0x766 <vfprintf+0x11a>
 75a:	83 37       	cpi	r24, 0x73	; 115
 75c:	71 f0       	breq	.+28     	; 0x77a <vfprintf+0x12e>
 75e:	83 35       	cpi	r24, 0x53	; 83
 760:	09 f0       	breq	.+2      	; 0x764 <vfprintf+0x118>
 762:	59 c0       	rjmp	.+178    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 764:	21 c0       	rjmp	.+66     	; 0x7a8 <vfprintf+0x15c>
 766:	f8 01       	movw	r30, r16
 768:	80 81       	ld	r24, Z
 76a:	89 83       	std	Y+1, r24	; 0x01
 76c:	0e 5f       	subi	r16, 0xFE	; 254
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	88 24       	eor	r8, r8
 772:	83 94       	inc	r8
 774:	91 2c       	mov	r9, r1
 776:	53 01       	movw	r10, r6
 778:	13 c0       	rjmp	.+38     	; 0x7a0 <vfprintf+0x154>
 77a:	28 01       	movw	r4, r16
 77c:	f2 e0       	ldi	r31, 0x02	; 2
 77e:	4f 0e       	add	r4, r31
 780:	51 1c       	adc	r5, r1
 782:	f8 01       	movw	r30, r16
 784:	a0 80       	ld	r10, Z
 786:	b1 80       	ldd	r11, Z+1	; 0x01
 788:	36 fe       	sbrs	r3, 6
 78a:	03 c0       	rjmp	.+6      	; 0x792 <vfprintf+0x146>
 78c:	69 2d       	mov	r22, r9
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x14a>
 792:	6f ef       	ldi	r22, 0xFF	; 255
 794:	7f ef       	ldi	r23, 0xFF	; 255
 796:	c5 01       	movw	r24, r10
 798:	0e 94 12 05 	call	0xa24	; 0xa24 <strnlen>
 79c:	4c 01       	movw	r8, r24
 79e:	82 01       	movw	r16, r4
 7a0:	f3 2d       	mov	r31, r3
 7a2:	ff 77       	andi	r31, 0x7F	; 127
 7a4:	3f 2e       	mov	r3, r31
 7a6:	16 c0       	rjmp	.+44     	; 0x7d4 <vfprintf+0x188>
 7a8:	28 01       	movw	r4, r16
 7aa:	22 e0       	ldi	r18, 0x02	; 2
 7ac:	42 0e       	add	r4, r18
 7ae:	51 1c       	adc	r5, r1
 7b0:	f8 01       	movw	r30, r16
 7b2:	a0 80       	ld	r10, Z
 7b4:	b1 80       	ldd	r11, Z+1	; 0x01
 7b6:	36 fe       	sbrs	r3, 6
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <vfprintf+0x174>
 7ba:	69 2d       	mov	r22, r9
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <vfprintf+0x178>
 7c0:	6f ef       	ldi	r22, 0xFF	; 255
 7c2:	7f ef       	ldi	r23, 0xFF	; 255
 7c4:	c5 01       	movw	r24, r10
 7c6:	0e 94 07 05 	call	0xa0e	; 0xa0e <strnlen_P>
 7ca:	4c 01       	movw	r8, r24
 7cc:	f3 2d       	mov	r31, r3
 7ce:	f0 68       	ori	r31, 0x80	; 128
 7d0:	3f 2e       	mov	r3, r31
 7d2:	82 01       	movw	r16, r4
 7d4:	33 fc       	sbrc	r3, 3
 7d6:	1b c0       	rjmp	.+54     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7d8:	82 2d       	mov	r24, r2
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	88 16       	cp	r8, r24
 7de:	99 06       	cpc	r9, r25
 7e0:	b0 f4       	brcc	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e2:	b6 01       	movw	r22, r12
 7e4:	80 e2       	ldi	r24, 0x20	; 32
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 7ec:	2a 94       	dec	r2
 7ee:	f4 cf       	rjmp	.-24     	; 0x7d8 <vfprintf+0x18c>
 7f0:	f5 01       	movw	r30, r10
 7f2:	37 fc       	sbrc	r3, 7
 7f4:	85 91       	lpm	r24, Z+
 7f6:	37 fe       	sbrs	r3, 7
 7f8:	81 91       	ld	r24, Z+
 7fa:	5f 01       	movw	r10, r30
 7fc:	b6 01       	movw	r22, r12
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 804:	21 10       	cpse	r2, r1
 806:	2a 94       	dec	r2
 808:	21 e0       	ldi	r18, 0x01	; 1
 80a:	82 1a       	sub	r8, r18
 80c:	91 08       	sbc	r9, r1
 80e:	81 14       	cp	r8, r1
 810:	91 04       	cpc	r9, r1
 812:	71 f7       	brne	.-36     	; 0x7f0 <vfprintf+0x1a4>
 814:	e8 c0       	rjmp	.+464    	; 0x9e6 <__stack+0xe7>
 816:	84 36       	cpi	r24, 0x64	; 100
 818:	11 f0       	breq	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	89 36       	cpi	r24, 0x69	; 105
 81c:	41 f5       	brne	.+80     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 81e:	f8 01       	movw	r30, r16
 820:	37 fe       	sbrs	r3, 7
 822:	07 c0       	rjmp	.+14     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 824:	60 81       	ld	r22, Z
 826:	71 81       	ldd	r23, Z+1	; 0x01
 828:	82 81       	ldd	r24, Z+2	; 0x02
 82a:	93 81       	ldd	r25, Z+3	; 0x03
 82c:	0c 5f       	subi	r16, 0xFC	; 252
 82e:	1f 4f       	sbci	r17, 0xFF	; 255
 830:	08 c0       	rjmp	.+16     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 832:	60 81       	ld	r22, Z
 834:	71 81       	ldd	r23, Z+1	; 0x01
 836:	07 2e       	mov	r0, r23
 838:	00 0c       	add	r0, r0
 83a:	88 0b       	sbc	r24, r24
 83c:	99 0b       	sbc	r25, r25
 83e:	0e 5f       	subi	r16, 0xFE	; 254
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	f3 2d       	mov	r31, r3
 844:	ff 76       	andi	r31, 0x6F	; 111
 846:	3f 2e       	mov	r3, r31
 848:	97 ff       	sbrs	r25, 7
 84a:	09 c0       	rjmp	.+18     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	f0 68       	ori	r31, 0x80	; 128
 85c:	3f 2e       	mov	r3, r31
 85e:	2a e0       	ldi	r18, 0x0A	; 10
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	a3 01       	movw	r20, r6
 864:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 868:	88 2e       	mov	r8, r24
 86a:	86 18       	sub	r8, r6
 86c:	45 c0       	rjmp	.+138    	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 86e:	85 37       	cpi	r24, 0x75	; 117
 870:	31 f4       	brne	.+12     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 872:	23 2d       	mov	r18, r3
 874:	2f 7e       	andi	r18, 0xEF	; 239
 876:	b2 2e       	mov	r11, r18
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	25 c0       	rjmp	.+74     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 87e:	93 2d       	mov	r25, r3
 880:	99 7f       	andi	r25, 0xF9	; 249
 882:	b9 2e       	mov	r11, r25
 884:	8f 36       	cpi	r24, 0x6F	; 111
 886:	c1 f0       	breq	.+48     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 888:	18 f4       	brcc	.+6      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88a:	88 35       	cpi	r24, 0x58	; 88
 88c:	79 f0       	breq	.+30     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 88e:	b5 c0       	rjmp	.+362    	; 0x9fa <__stack+0xfb>
 890:	80 37       	cpi	r24, 0x70	; 112
 892:	19 f0       	breq	.+6      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 894:	88 37       	cpi	r24, 0x78	; 120
 896:	21 f0       	breq	.+8      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 898:	b0 c0       	rjmp	.+352    	; 0x9fa <__stack+0xfb>
 89a:	e9 2f       	mov	r30, r25
 89c:	e0 61       	ori	r30, 0x10	; 16
 89e:	be 2e       	mov	r11, r30
 8a0:	b4 fe       	sbrs	r11, 4
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8a4:	fb 2d       	mov	r31, r11
 8a6:	f4 60       	ori	r31, 0x04	; 4
 8a8:	bf 2e       	mov	r11, r31
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8ac:	34 fe       	sbrs	r3, 4
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b0:	29 2f       	mov	r18, r25
 8b2:	26 60       	ori	r18, 0x06	; 6
 8b4:	b2 2e       	mov	r11, r18
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b8:	28 e0       	ldi	r18, 0x08	; 8
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8be:	20 e1       	ldi	r18, 0x10	; 16
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	32 e0       	ldi	r19, 0x02	; 2
 8c8:	f8 01       	movw	r30, r16
 8ca:	b7 fe       	sbrs	r11, 7
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ce:	60 81       	ld	r22, Z
 8d0:	71 81       	ldd	r23, Z+1	; 0x01
 8d2:	82 81       	ldd	r24, Z+2	; 0x02
 8d4:	93 81       	ldd	r25, Z+3	; 0x03
 8d6:	0c 5f       	subi	r16, 0xFC	; 252
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8dc:	60 81       	ld	r22, Z
 8de:	71 81       	ldd	r23, Z+1	; 0x01
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 5f       	subi	r16, 0xFE	; 254
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	a3 01       	movw	r20, r6
 8ea:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 8ee:	88 2e       	mov	r8, r24
 8f0:	86 18       	sub	r8, r6
 8f2:	fb 2d       	mov	r31, r11
 8f4:	ff 77       	andi	r31, 0x7F	; 127
 8f6:	3f 2e       	mov	r3, r31
 8f8:	36 fe       	sbrs	r3, 6
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__stack+0x17>
 8fc:	23 2d       	mov	r18, r3
 8fe:	2e 7f       	andi	r18, 0xFE	; 254
 900:	a2 2e       	mov	r10, r18
 902:	89 14       	cp	r8, r9
 904:	58 f4       	brcc	.+22     	; 0x91c <__stack+0x1d>
 906:	34 fe       	sbrs	r3, 4
 908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0x21>
 90a:	32 fc       	sbrc	r3, 2
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0x21>
 90e:	83 2d       	mov	r24, r3
 910:	8e 7e       	andi	r24, 0xEE	; 238
 912:	a8 2e       	mov	r10, r24
 914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
 916:	b8 2c       	mov	r11, r8
 918:	a3 2c       	mov	r10, r3
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	b8 2c       	mov	r11, r8
 91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0x23>
 920:	b9 2c       	mov	r11, r9
 922:	a4 fe       	sbrs	r10, 4
 924:	0f c0       	rjmp	.+30     	; 0x944 <__stack+0x45>
 926:	fe 01       	movw	r30, r28
 928:	e8 0d       	add	r30, r8
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	80 33       	cpi	r24, 0x30	; 48
 930:	21 f4       	brne	.+8      	; 0x93a <__stack+0x3b>
 932:	9a 2d       	mov	r25, r10
 934:	99 7e       	andi	r25, 0xE9	; 233
 936:	a9 2e       	mov	r10, r25
 938:	09 c0       	rjmp	.+18     	; 0x94c <__stack+0x4d>
 93a:	a2 fe       	sbrs	r10, 2
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0x4b>
 93e:	b3 94       	inc	r11
 940:	b3 94       	inc	r11
 942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
 944:	8a 2d       	mov	r24, r10
 946:	86 78       	andi	r24, 0x86	; 134
 948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
 94a:	b3 94       	inc	r11
 94c:	a3 fc       	sbrc	r10, 3
 94e:	11 c0       	rjmp	.+34     	; 0x972 <__stack+0x73>
 950:	a0 fe       	sbrs	r10, 0
 952:	06 c0       	rjmp	.+12     	; 0x960 <__stack+0x61>
 954:	b2 14       	cp	r11, r2
 956:	88 f4       	brcc	.+34     	; 0x97a <__stack+0x7b>
 958:	28 0c       	add	r2, r8
 95a:	92 2c       	mov	r9, r2
 95c:	9b 18       	sub	r9, r11
 95e:	0e c0       	rjmp	.+28     	; 0x97c <__stack+0x7d>
 960:	b2 14       	cp	r11, r2
 962:	60 f4       	brcc	.+24     	; 0x97c <__stack+0x7d>
 964:	b6 01       	movw	r22, r12
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 96e:	b3 94       	inc	r11
 970:	f7 cf       	rjmp	.-18     	; 0x960 <__stack+0x61>
 972:	b2 14       	cp	r11, r2
 974:	18 f4       	brcc	.+6      	; 0x97c <__stack+0x7d>
 976:	2b 18       	sub	r2, r11
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	98 2c       	mov	r9, r8
 97c:	21 2c       	mov	r2, r1
 97e:	a4 fe       	sbrs	r10, 4
 980:	10 c0       	rjmp	.+32     	; 0x9a2 <__stack+0xa3>
 982:	b6 01       	movw	r22, r12
 984:	80 e3       	ldi	r24, 0x30	; 48
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 98c:	a2 fe       	sbrs	r10, 2
 98e:	17 c0       	rjmp	.+46     	; 0x9be <__stack+0xbf>
 990:	a1 fc       	sbrc	r10, 1
 992:	03 c0       	rjmp	.+6      	; 0x99a <__stack+0x9b>
 994:	88 e7       	ldi	r24, 0x78	; 120
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
 99a:	88 e5       	ldi	r24, 0x58	; 88
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	b6 01       	movw	r22, r12
 9a0:	0c c0       	rjmp	.+24     	; 0x9ba <__stack+0xbb>
 9a2:	8a 2d       	mov	r24, r10
 9a4:	86 78       	andi	r24, 0x86	; 134
 9a6:	59 f0       	breq	.+22     	; 0x9be <__stack+0xbf>
 9a8:	a1 fe       	sbrs	r10, 1
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	8b e2       	ldi	r24, 0x2B	; 43
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <__stack+0xb3>
 9b0:	80 e2       	ldi	r24, 0x20	; 32
 9b2:	a7 fc       	sbrc	r10, 7
 9b4:	8d e2       	ldi	r24, 0x2D	; 45
 9b6:	b6 01       	movw	r22, r12
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 9be:	89 14       	cp	r8, r9
 9c0:	38 f4       	brcc	.+14     	; 0x9d0 <__stack+0xd1>
 9c2:	b6 01       	movw	r22, r12
 9c4:	80 e3       	ldi	r24, 0x30	; 48
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 9cc:	9a 94       	dec	r9
 9ce:	f7 cf       	rjmp	.-18     	; 0x9be <__stack+0xbf>
 9d0:	8a 94       	dec	r8
 9d2:	f3 01       	movw	r30, r6
 9d4:	e8 0d       	add	r30, r8
 9d6:	f1 1d       	adc	r31, r1
 9d8:	80 81       	ld	r24, Z
 9da:	b6 01       	movw	r22, r12
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 9e2:	81 10       	cpse	r8, r1
 9e4:	f5 cf       	rjmp	.-22     	; 0x9d0 <__stack+0xd1>
 9e6:	22 20       	and	r2, r2
 9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0xed>
 9ea:	42 ce       	rjmp	.-892    	; 0x670 <vfprintf+0x24>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fputc>
 9f6:	2a 94       	dec	r2
 9f8:	f6 cf       	rjmp	.-20     	; 0x9e6 <__stack+0xe7>
 9fa:	f6 01       	movw	r30, r12
 9fc:	86 81       	ldd	r24, Z+6	; 0x06
 9fe:	97 81       	ldd	r25, Z+7	; 0x07
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x107>
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	9f ef       	ldi	r25, 0xFF	; 255
 a06:	2b 96       	adiw	r28, 0x0b	; 11
 a08:	e2 e1       	ldi	r30, 0x12	; 18
 a0a:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__epilogue_restores__>

00000a0e <strnlen_P>:
 a0e:	fc 01       	movw	r30, r24
 a10:	05 90       	lpm	r0, Z+
 a12:	61 50       	subi	r22, 0x01	; 1
 a14:	70 40       	sbci	r23, 0x00	; 0
 a16:	01 10       	cpse	r0, r1
 a18:	d8 f7       	brcc	.-10     	; 0xa10 <strnlen_P+0x2>
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	8e 0f       	add	r24, r30
 a20:	9f 1f       	adc	r25, r31
 a22:	08 95       	ret

00000a24 <strnlen>:
 a24:	fc 01       	movw	r30, r24
 a26:	61 50       	subi	r22, 0x01	; 1
 a28:	70 40       	sbci	r23, 0x00	; 0
 a2a:	01 90       	ld	r0, Z+
 a2c:	01 10       	cpse	r0, r1
 a2e:	d8 f7       	brcc	.-10     	; 0xa26 <strnlen+0x2>
 a30:	80 95       	com	r24
 a32:	90 95       	com	r25
 a34:	8e 0f       	add	r24, r30
 a36:	9f 1f       	adc	r25, r31
 a38:	08 95       	ret

00000a3a <fputc>:
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	fb 01       	movw	r30, r22
 a44:	23 81       	ldd	r18, Z+3	; 0x03
 a46:	21 fd       	sbrc	r18, 1
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <fputc+0x16>
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	9f ef       	ldi	r25, 0xFF	; 255
 a4e:	2c c0       	rjmp	.+88     	; 0xaa8 <fputc+0x6e>
 a50:	22 ff       	sbrs	r18, 2
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <fputc+0x46>
 a54:	46 81       	ldd	r20, Z+6	; 0x06
 a56:	57 81       	ldd	r21, Z+7	; 0x07
 a58:	24 81       	ldd	r18, Z+4	; 0x04
 a5a:	35 81       	ldd	r19, Z+5	; 0x05
 a5c:	42 17       	cp	r20, r18
 a5e:	53 07       	cpc	r21, r19
 a60:	44 f4       	brge	.+16     	; 0xa72 <fputc+0x38>
 a62:	a0 81       	ld	r26, Z
 a64:	b1 81       	ldd	r27, Z+1	; 0x01
 a66:	9d 01       	movw	r18, r26
 a68:	2f 5f       	subi	r18, 0xFF	; 255
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	31 83       	std	Z+1, r19	; 0x01
 a6e:	20 83       	st	Z, r18
 a70:	8c 93       	st	X, r24
 a72:	26 81       	ldd	r18, Z+6	; 0x06
 a74:	37 81       	ldd	r19, Z+7	; 0x07
 a76:	2f 5f       	subi	r18, 0xFF	; 255
 a78:	3f 4f       	sbci	r19, 0xFF	; 255
 a7a:	37 83       	std	Z+7, r19	; 0x07
 a7c:	26 83       	std	Z+6, r18	; 0x06
 a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <fputc+0x6e>
 a80:	8b 01       	movw	r16, r22
 a82:	ec 01       	movw	r28, r24
 a84:	fb 01       	movw	r30, r22
 a86:	00 84       	ldd	r0, Z+8	; 0x08
 a88:	f1 85       	ldd	r31, Z+9	; 0x09
 a8a:	e0 2d       	mov	r30, r0
 a8c:	09 95       	icall
 a8e:	89 2b       	or	r24, r25
 a90:	e1 f6       	brne	.-72     	; 0xa4a <fputc+0x10>
 a92:	d8 01       	movw	r26, r16
 a94:	16 96       	adiw	r26, 0x06	; 6
 a96:	8d 91       	ld	r24, X+
 a98:	9c 91       	ld	r25, X
 a9a:	17 97       	sbiw	r26, 0x07	; 7
 a9c:	01 96       	adiw	r24, 0x01	; 1
 a9e:	17 96       	adiw	r26, 0x07	; 7
 aa0:	9c 93       	st	X, r25
 aa2:	8e 93       	st	-X, r24
 aa4:	16 97       	sbiw	r26, 0x06	; 6
 aa6:	ce 01       	movw	r24, r28
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__ultoa_invert>:
 ab2:	fa 01       	movw	r30, r20
 ab4:	aa 27       	eor	r26, r26
 ab6:	28 30       	cpi	r18, 0x08	; 8
 ab8:	51 f1       	breq	.+84     	; 0xb0e <__ultoa_invert+0x5c>
 aba:	20 31       	cpi	r18, 0x10	; 16
 abc:	81 f1       	breq	.+96     	; 0xb1e <__ultoa_invert+0x6c>
 abe:	e8 94       	clt
 ac0:	6f 93       	push	r22
 ac2:	6e 7f       	andi	r22, 0xFE	; 254
 ac4:	6e 5f       	subi	r22, 0xFE	; 254
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	af 4f       	sbci	r26, 0xFF	; 255
 ace:	b1 e0       	ldi	r27, 0x01	; 1
 ad0:	3e d0       	rcall	.+124    	; 0xb4e <__ultoa_invert+0x9c>
 ad2:	b4 e0       	ldi	r27, 0x04	; 4
 ad4:	3c d0       	rcall	.+120    	; 0xb4e <__ultoa_invert+0x9c>
 ad6:	67 0f       	add	r22, r23
 ad8:	78 1f       	adc	r23, r24
 ada:	89 1f       	adc	r24, r25
 adc:	9a 1f       	adc	r25, r26
 ade:	a1 1d       	adc	r26, r1
 ae0:	68 0f       	add	r22, r24
 ae2:	79 1f       	adc	r23, r25
 ae4:	8a 1f       	adc	r24, r26
 ae6:	91 1d       	adc	r25, r1
 ae8:	a1 1d       	adc	r26, r1
 aea:	6a 0f       	add	r22, r26
 aec:	71 1d       	adc	r23, r1
 aee:	81 1d       	adc	r24, r1
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	20 d0       	rcall	.+64     	; 0xb36 <__ultoa_invert+0x84>
 af6:	09 f4       	brne	.+2      	; 0xafa <__ultoa_invert+0x48>
 af8:	68 94       	set
 afa:	3f 91       	pop	r19
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	26 9f       	mul	r18, r22
 b00:	11 24       	eor	r1, r1
 b02:	30 19       	sub	r19, r0
 b04:	30 5d       	subi	r19, 0xD0	; 208
 b06:	31 93       	st	Z+, r19
 b08:	de f6       	brtc	.-74     	; 0xac0 <__ultoa_invert+0xe>
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret
 b0e:	46 2f       	mov	r20, r22
 b10:	47 70       	andi	r20, 0x07	; 7
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	41 93       	st	Z+, r20
 b16:	b3 e0       	ldi	r27, 0x03	; 3
 b18:	0f d0       	rcall	.+30     	; 0xb38 <__ultoa_invert+0x86>
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x5c>
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <__ultoa_invert+0x58>
 b1e:	46 2f       	mov	r20, r22
 b20:	4f 70       	andi	r20, 0x0F	; 15
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	4a 33       	cpi	r20, 0x3A	; 58
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__ultoa_invert+0x7c>
 b28:	49 5d       	subi	r20, 0xD9	; 217
 b2a:	31 fd       	sbrc	r19, 1
 b2c:	40 52       	subi	r20, 0x20	; 32
 b2e:	41 93       	st	Z+, r20
 b30:	02 d0       	rcall	.+4      	; 0xb36 <__ultoa_invert+0x84>
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__ultoa_invert+0x6c>
 b34:	ea cf       	rjmp	.-44     	; 0xb0a <__ultoa_invert+0x58>
 b36:	b4 e0       	ldi	r27, 0x04	; 4
 b38:	a6 95       	lsr	r26
 b3a:	97 95       	ror	r25
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x86>
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	61 05       	cpc	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 95       	ret
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	0a 2e       	mov	r0, r26
 b54:	06 94       	lsr	r0
 b56:	57 95       	ror	r21
 b58:	47 95       	ror	r20
 b5a:	37 95       	ror	r19
 b5c:	27 95       	ror	r18
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0xa2>
 b62:	62 0f       	add	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	95 1f       	adc	r25, r21
 b6a:	a0 1d       	adc	r26, r0
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
