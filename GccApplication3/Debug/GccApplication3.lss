
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800162  00800162  00000c52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ff  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8f  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9d  00000000  00000000  00002cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ad  00000000  00000000  000042d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  9e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_Init>:
#define DHT11_DDR DDRC
#define DHT11_PORT PORTC
#define DHT11_PIN_INPUT PINC

void DHT11_Init(void) {
	DHT11_DDR |= (1 << DHT11_PIN); // Configura el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	DHT11_PORT |= (1 << DHT11_PIN); // Establece el pin en alto
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <DHT11_Read>:
}

uint8_t DHT11_Read(int *temperature_1, int *temperature_2, int *humidity_1, int *humidity_2) {
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DHT11_Read+0x12>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <DHT11_Read+0x14>
  c8:	1f 92       	push	r1
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	8c 01       	movw	r16, r24
  d0:	79 01       	movw	r14, r18
	uint8_t bits[5] = {0}; // Asegurarse de inicializar los bits a 0
  d2:	fe 01       	movw	r30, r28
  d4:	31 96       	adiw	r30, 0x01	; 1
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	df 01       	movw	r26, r30
  da:	1d 92       	st	X+, r1
  dc:	8a 95       	dec	r24
  de:	e9 f7       	brne	.-6      	; 0xda <DHT11_Read+0x26>
	uint8_t i, j = 0;

	// Enviar señal de inicio: Señal baja por 18 ms
	DHT11_PORT &= ~(1 << DHT11_PIN);
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	fc e8       	ldi	r31, 0x8C	; 140
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <DHT11_Read+0x36>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <DHT11_Read+0x3c>
  f0:	00 00       	nop
	_delay_ms(18);
	// MCU envía señal alta por 20-40 us para esperar que se prepare el DHT11
	DHT11_PORT |= (1 << DHT11_PIN);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	f5 e3       	ldi	r31, 0x35	; 53
  fa:	fa 95       	dec	r31
  fc:	f1 f7       	brne	.-4      	; 0xfa <DHT11_Read+0x46>
  fe:	00 00       	nop
	_delay_us(20);

	// Configura el pin como ENTRADA para LEER la respuesta del DHT11
	DHT11_DDR &= ~(1 << DHT11_PIN);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	87 b9       	out	0x07, r24	; 7
	
	// Espera a que el pin se ponga bajo (máximo 80 us)
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 106:	30 99       	sbic	0x06, 0	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <DHT11_Read+0x52>
	//_delay_us(80);

	// Espera a que el pin se ponga alto (máximo 80 us)
	while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 10a:	30 9b       	sbis	0x06, 0	; 6
 10c:	fe cf       	rjmp	.-4      	; 0x10a <DHT11_Read+0x56>
	//_delay_us(80);

	// Espera a que el pin se ponga bajo nuevamente
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 10e:	96 b1       	in	r25, 0x06	; 6
 110:	89 2f       	mov	r24, r25
 112:	81 70       	andi	r24, 0x01	; 1
 114:	90 fd       	sbrc	r25, 0
 116:	fb cf       	rjmp	.-10     	; 0x10e <DHT11_Read+0x5a>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	24 c0       	rjmp	.+72     	; 0x164 <DHT11_Read+0xb0>
	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
		uint8_t result = 0;
		for (i = 0; i < 8; i++) {
			// Espera a que el pin se ponga alto
			while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 11c:	30 9b       	sbis	0x06, 0	; 6
 11e:	fe cf       	rjmp	.-4      	; 0x11c <DHT11_Read+0x68>
 120:	aa e6       	ldi	r26, 0x6A	; 106
 122:	aa 95       	dec	r26
 124:	f1 f7       	brne	.-4      	; 0x122 <DHT11_Read+0x6e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <DHT11_Read+0x74>
			// -En alto: bit = 1
			// -En bajo: bit = 0
			// Como result se inicializa con todo en 0, no hace falta
			// especificar que se le esta asignando un 0 a la posicion i
			// Solo se asigna 1 cuando es necesario
			if (DHT11_PIN_INPUT & (1 << DHT11_PIN)) {
 128:	30 9b       	sbis	0x06, 0	; 6
 12a:	0c c0       	rjmp	.+24     	; 0x144 <DHT11_Read+0x90>
				result |= (1 << (7 - i)); // Establece el bit 'i' en 1
 12c:	a7 e0       	ldi	r26, 0x07	; 7
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	a9 1b       	sub	r26, r25
 132:	b1 09       	sbc	r27, r1
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DHT11_Read+0x8a>
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	aa 95       	dec	r26
 140:	e2 f7       	brpl	.-8      	; 0x13a <DHT11_Read+0x86>
 142:	3e 2b       	or	r19, r30
			}

			// Espera a que el pin se ponga bajo
			while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
 144:	30 99       	sbic	0x06, 0	; 6
 146:	fe cf       	rjmp	.-4      	; 0x144 <DHT11_Read+0x90>
	//_delay_us(50);

	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
		uint8_t result = 0;
		for (i = 0; i < 8; i++) {
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DHT11_Read+0x9c>
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	98 30       	cpi	r25, 0x08	; 8
 152:	20 f3       	brcs	.-56     	; 0x11c <DHT11_Read+0x68>
			}

			// Espera a que el pin se ponga bajo
			while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
		}
		bits[j] = result;
 154:	e1 e0       	ldi	r30, 0x01	; 1
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ec 0f       	add	r30, r28
 15a:	fd 1f       	adc	r31, r29
 15c:	e2 0f       	add	r30, r18
 15e:	f1 1d       	adc	r31, r1
 160:	30 83       	st	Z, r19
	// Espera a que el pin se ponga bajo nuevamente
	while (DHT11_PIN_INPUT & (1 << DHT11_PIN));
	//_delay_us(50);

	// Lee los datos del DHT11
	for (j = 0; j < 5; j++) {
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	25 30       	cpi	r18, 0x05	; 5
 166:	90 f3       	brcs	.-28     	; 0x14c <DHT11_Read+0x98>
		}
		bits[j] = result;
	}
	
	// Espera a que el pin se ponga alto
	while (!(DHT11_PIN_INPUT & (1 << DHT11_PIN)));
 168:	30 9b       	sbis	0x06, 0	; 6
 16a:	fe cf       	rjmp	.-4      	; 0x168 <DHT11_Read+0xb4>

	// Configura el pin como salida y lo establece en alto
	DHT11_DDR |= (1 << DHT11_PIN);
 16c:	97 b1       	in	r25, 0x07	; 7
 16e:	91 60       	ori	r25, 0x01	; 1
 170:	97 b9       	out	0x07, r25	; 7
	DHT11_PORT |= (1 << DHT11_PIN);
 172:	98 b1       	in	r25, 0x08	; 8
 174:	91 60       	ori	r25, 0x01	; 1
 176:	98 b9       	out	0x08, r25	; 8

	// Verificación de la suma de comprobación
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) {
 178:	a9 81       	ldd	r26, Y+1	; 0x01
 17a:	ea 81       	ldd	r30, Y+2	; 0x02
 17c:	3b 81       	ldd	r19, Y+3	; 0x03
 17e:	2c 81       	ldd	r18, Y+4	; 0x04
 180:	9a 2f       	mov	r25, r26
 182:	9e 0f       	add	r25, r30
 184:	93 0f       	add	r25, r19
 186:	92 0f       	add	r25, r18
 188:	fd 81       	ldd	r31, Y+5	; 0x05
 18a:	9f 13       	cpse	r25, r31
 18c:	14 c0       	rjmp	.+40     	; 0x1b6 <DHT11_Read+0x102>
		return 1; // Error: la suma de comprobación no coincide
	}
	
	*humidity_1 = bits[0];
 18e:	ca 2e       	mov	r12, r26
 190:	d1 2c       	mov	r13, r1
 192:	da 01       	movw	r26, r20
 194:	cd 92       	st	X+, r12
 196:	dc 92       	st	X, r13
	*humidity_2 = bits[1];
 198:	4e 2f       	mov	r20, r30
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	f7 01       	movw	r30, r14
 19e:	51 83       	std	Z+1, r21	; 0x01
 1a0:	40 83       	st	Z, r20
	*temperature_1 = bits[2];
 1a2:	43 2f       	mov	r20, r19
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	d8 01       	movw	r26, r16
 1a8:	4d 93       	st	X+, r20
 1aa:	5c 93       	st	X, r21
	*temperature_2 = bits[3];
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	fb 01       	movw	r30, r22
 1b0:	31 83       	std	Z+1, r19	; 0x01
 1b2:	20 83       	st	Z, r18

	return 0; // Lectura exitosa uwu
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DHT11_Read+0x104>
	DHT11_DDR |= (1 << DHT11_PIN);
	DHT11_PORT |= (1 << DHT11_PIN);

	// Verificación de la suma de comprobación
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) {
		return 1; // Error: la suma de comprobación no coincide
 1b6:	81 e0       	ldi	r24, 0x01	; 1
	*humidity_2 = bits[1];
	*temperature_1 = bits[2];
	*temperature_2 = bits[3];

	return 0; // Lectura exitosa uwu
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <I2C_Init>:
#include <avr/io.h>
#include <util/twi.h>
#include <DS3231.h>

void I2C_Init(void) {
	TWSR = 0x00;
 1d4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x47;
 1d8:	87 e4       	ldi	r24, 0x47	; 71
 1da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e4:	08 95       	ret

000001e6 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 1e6:	84 ea       	ldi	r24, 0xA4	; 164
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 1ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f7       	brge	.-8      	; 0x1ec <I2C_Start+0x6>
}
 1f4:	08 95       	ret

000001f6 <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 1f6:	84 e9       	ldi	r24, 0x94	; 148
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fc:	08 95       	ret

000001fe <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 1fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 208:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	88 23       	and	r24, r24
 20e:	e4 f7       	brge	.-8      	; 0x208 <I2C_Write+0xa>
}
 210:	08 95       	ret

00000212 <I2C_Read_Ack>:

uint8_t I2C_Read_Ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 212:	84 ec       	ldi	r24, 0xC4	; 196
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 218:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21c:	88 23       	and	r24, r24
 21e:	e4 f7       	brge	.-8      	; 0x218 <I2C_Read_Ack+0x6>
	return TWDR;
 220:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 224:	08 95       	ret

00000226 <I2C_Read_NAck>:

uint8_t I2C_Read_NAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 22c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 230:	88 23       	and	r24, r24
 232:	e4 f7       	brge	.-8      	; 0x22c <I2C_Read_NAck+0x6>
	return TWDR;
 234:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 238:	08 95       	ret

0000023a <DS3231_GetTime>:

void DS3231_GetTime(uint8_t *hour, uint8_t *minute, uint8_t *second) {
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	8b 01       	movw	r16, r22
 24a:	7a 01       	movw	r14, r20
	I2C_Start();
 24c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 250:	80 ed       	ldi	r24, 0xD0	; 208
 252:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	I2C_Write(0x00);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	I2C_Start();
 25c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 260:	81 ed       	ldi	r24, 0xD1	; 209
 262:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	*second = I2C_Read_Ack();
 266:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Read_Ack>
 26a:	f7 01       	movw	r30, r14
 26c:	80 83       	st	Z, r24
	*minute = I2C_Read_Ack();
 26e:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Read_Ack>
 272:	f8 01       	movw	r30, r16
 274:	80 83       	st	Z, r24
	*hour = I2C_Read_NAck();
 276:	0e 94 13 01 	call	0x226	; 0x226 <I2C_Read_NAck>
 27a:	88 83       	st	Y, r24
	I2C_Stop();
 27c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_Stop>
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <DS3231_GetDate>:

void DS3231_GetDate(uint8_t *day, uint8_t *month, uint8_t *year) {
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	7c 01       	movw	r14, r24
 29c:	8b 01       	movw	r16, r22
 29e:	ea 01       	movw	r28, r20
	I2C_Start();
 2a0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 2a4:	80 ed       	ldi	r24, 0xD0	; 208
 2a6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	I2C_Write(0x04);
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	I2C_Start();
 2b0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 2b4:	81 ed       	ldi	r24, 0xD1	; 209
 2b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Write>
	*day = I2C_Read_Ack();
 2ba:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Read_Ack>
 2be:	f7 01       	movw	r30, r14
 2c0:	80 83       	st	Z, r24
	*month = I2C_Read_Ack();
 2c2:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Read_Ack>
 2c6:	f8 01       	movw	r30, r16
 2c8:	80 83       	st	Z, r24
	*year = I2C_Read_NAck();
 2ca:	0e 94 13 01 	call	0x226	; 0x226 <I2C_Read_NAck>
 2ce:	88 83       	st	Y, r24
	I2C_Stop();
 2d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_Stop>
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 2e2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2e6:	96 e0       	ldi	r25, 0x06	; 6
 2e8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2f4:	08 95       	ret

000002f6 <SerialPort_TX_Enable>:
 2f6:	e1 ec       	ldi	r30, 0xC1	; 193
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <SerialPort_RX_Enable>:


// Inicializaci�n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 302:	e1 ec       	ldi	r30, 0xC1	; 193
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	80 83       	st	Z, r24
 30c:	08 95       	ret

0000030e <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 30e:	e1 ec       	ldi	r30, 0xC1	; 193
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisi�n

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 31a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 31e:	85 ff       	sbrs	r24, 5
 320:	fc cf       	rjmp	.-8      	; 0x31a <SerialPort_Wait_For_TX_Buffer_Free>
}
 322:	08 95       	ret

00000324 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 324:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 328:	08 95       	ret

0000032a <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 336:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 338:	07 c0       	rjmp	.+14     	; 0x348 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 33a:	0e 94 8d 01 	call	0x31a	; 0x31a <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 33e:	f8 01       	movw	r30, r16
 340:	80 81       	ld	r24, Z
 342:	0e 94 92 01 	call	0x324	; 0x324 <SerialPort_Send_Data>
		i++;
 346:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 348:	87 01       	movw	r16, r14
 34a:	0c 0f       	add	r16, r28
 34c:	11 1d       	adc	r17, r1
 34e:	f8 01       	movw	r30, r16
 350:	80 81       	ld	r24, Z
 352:	81 11       	cpse	r24, r1
 354:	f2 cf       	rjmp	.-28     	; 0x33a <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	08 95       	ret

00000362 <Task_TemHum>:
#include <stdio.h>

extern volatile uint8_t Flag_SendData;
extern char msg2[];

void Task_TemHum(void) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	c2 57       	subi	r28, 0x72	; 114
 36c:	d1 09       	sbc	r29, r1
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
	int temperature_1 = 0;
 378:	1a 82       	std	Y+2, r1	; 0x02
 37a:	19 82       	std	Y+1, r1	; 0x01
	int temperature_2 = 0;
 37c:	1c 82       	std	Y+4, r1	; 0x04
 37e:	1b 82       	std	Y+3, r1	; 0x03
	int humidity_1 = 0;
 380:	1e 82       	std	Y+6, r1	; 0x06
 382:	1d 82       	std	Y+5, r1	; 0x05
	int humidity_2 = 0;
 384:	18 86       	std	Y+8, r1	; 0x08
 386:	1f 82       	std	Y+7, r1	; 0x07

	if (DHT11_Read(&temperature_1, &temperature_2, &humidity_1, &humidity_2) == 0) {
 388:	9e 01       	movw	r18, r28
 38a:	29 5f       	subi	r18, 0xF9	; 249
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	ae 01       	movw	r20, r28
 390:	4b 5f       	subi	r20, 0xFB	; 251
 392:	5f 4f       	sbci	r21, 0xFF	; 255
 394:	be 01       	movw	r22, r28
 396:	6d 5f       	subi	r22, 0xFD	; 253
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DHT11_Read>
 3a2:	81 11       	cpse	r24, r1
 3a4:	5e c0       	rjmp	.+188    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		char buffer[100];
		uint8_t hour, minute, second, day, month, year;
		DS3231_GetTime(&hour, &minute, &second);
 3a6:	ae 01       	movw	r20, r28
 3a8:	40 59       	subi	r20, 0x90	; 144
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 58       	subi	r22, 0x8F	; 143
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	ce 01       	movw	r24, r28
 3b4:	8e 58       	subi	r24, 0x8E	; 142
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	0e 94 1d 01 	call	0x23a	; 0x23a <DS3231_GetTime>
		DS3231_GetDate(&day, &month, &year);
 3bc:	ae 01       	movw	r20, r28
 3be:	43 59       	subi	r20, 0x93	; 147
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	be 01       	movw	r22, r28
 3c4:	62 59       	subi	r22, 0x92	; 146
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	ce 01       	movw	r24, r28
 3ca:	81 59       	subi	r24, 0x91	; 145
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	0e 94 47 01 	call	0x28e	; 0x28e <DS3231_GetDate>

		snprintf(buffer, sizeof(buffer),
 3d2:	e1 96       	adiw	r28, 0x31	; 49
 3d4:	8f ad       	ldd	r24, Y+63	; 0x3f
 3d6:	e1 97       	sbiw	r28, 0x31	; 49
 3d8:	1f 92       	push	r1
 3da:	8f 93       	push	r24
 3dc:	e2 96       	adiw	r28, 0x32	; 50
 3de:	8f ad       	ldd	r24, Y+63	; 0x3f
 3e0:	e2 97       	sbiw	r28, 0x32	; 50
 3e2:	1f 92       	push	r1
 3e4:	8f 93       	push	r24
 3e6:	e3 96       	adiw	r28, 0x33	; 51
 3e8:	8f ad       	ldd	r24, Y+63	; 0x3f
 3ea:	e3 97       	sbiw	r28, 0x33	; 51
 3ec:	1f 92       	push	r1
 3ee:	8f 93       	push	r24
 3f0:	ae 96       	adiw	r28, 0x2e	; 46
 3f2:	8f ad       	ldd	r24, Y+63	; 0x3f
 3f4:	ae 97       	sbiw	r28, 0x2e	; 46
 3f6:	1f 92       	push	r1
 3f8:	8f 93       	push	r24
 3fa:	af 96       	adiw	r28, 0x2f	; 47
 3fc:	8f ad       	ldd	r24, Y+63	; 0x3f
 3fe:	af 97       	sbiw	r28, 0x2f	; 47
 400:	1f 92       	push	r1
 402:	8f 93       	push	r24
 404:	e0 96       	adiw	r28, 0x30	; 48
 406:	8f ad       	ldd	r24, Y+63	; 0x3f
 408:	e0 97       	sbiw	r28, 0x30	; 48
 40a:	1f 92       	push	r1
 40c:	8f 93       	push	r24
 40e:	88 85       	ldd	r24, Y+8	; 0x08
 410:	8f 93       	push	r24
 412:	8f 81       	ldd	r24, Y+7	; 0x07
 414:	8f 93       	push	r24
 416:	8e 81       	ldd	r24, Y+6	; 0x06
 418:	8f 93       	push	r24
 41a:	8d 81       	ldd	r24, Y+5	; 0x05
 41c:	8f 93       	push	r24
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	8f 93       	push	r24
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	8f 93       	push	r24
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	8f 93       	push	r24
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	8f 93       	push	r24
 42e:	88 e1       	ldi	r24, 0x18	; 24
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	9f 93       	push	r25
 434:	8f 93       	push	r24
 436:	1f 92       	push	r1
 438:	84 e6       	ldi	r24, 0x64	; 100
 43a:	8f 93       	push	r24
 43c:	ce 01       	movw	r24, r28
 43e:	09 96       	adiw	r24, 0x09	; 9
 440:	9f 93       	push	r25
 442:	8f 93       	push	r24
 444:	0e 94 b4 02 	call	0x568	; 0x568 <snprintf>
		"TEMP: %d.%d°C HUM: %d.%d%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
		temperature_1, temperature_2, humidity_1, humidity_2,
		day, month, year, hour, minute, second);

		if (Flag_SendData) {
 448:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Flag_SendData>
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	88 23       	and	r24, r24
 458:	21 f0       	breq	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			SerialPort_Send_String(buffer);
 45a:	ce 01       	movw	r24, r28
 45c:	09 96       	adiw	r24, 0x09	; 9
 45e:	0e 94 95 01 	call	0x32a	; 0x32a <SerialPort_Send_String>
		}
	}
}
 462:	ce 58       	subi	r28, 0x8E	; 142
 464:	df 4f       	sbci	r29, 0xFF	; 255
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <__vector_18>:

ISR(USART_RX_vect) {
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	static volatile uint8_t RX_Buffer = 0;
	RX_Buffer = UDR0; // Read received data
 498:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 49c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>

	if (RX_Buffer == 's' || RX_Buffer == 'S') {
 4a0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
 4a4:	83 37       	cpi	r24, 0x73	; 115
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <__vector_18+0x3a>
 4a8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
 4ac:	83 35       	cpi	r24, 0x53	; 83
 4ae:	79 f4       	brne	.+30     	; 0x4ce <__vector_18+0x58>
		Flag_SendData = !Flag_SendData; // Toggle data sending
 4b0:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <Flag_SendData>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	91 11       	cpse	r25, r1
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Flag_SendData>
		if (!Flag_SendData) {
 4be:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Flag_SendData>
 4c2:	81 11       	cpse	r24, r1
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__vector_18+0x58>
			SerialPort_Send_String(msg2);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 95 01 	call	0x32a	; 0x32a <SerialPort_Send_String>
		}
	}
}
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	bf 91       	pop	r27
 4d4:	af 91       	pop	r26
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	7f 91       	pop	r23
 4dc:	6f 91       	pop	r22
 4de:	5f 91       	pop	r21
 4e0:	4f 91       	pop	r20
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <Timer1_Init>:
// }

//Creo que tarda lo mismo usando 256 y 1024
void Timer1_Init(void) {
	// Configurar Timer1 en modo CTC
	TCCR1B |= (1 << WGM12); // Modo CTC
 4f0:	e1 e8       	ldi	r30, 0x81	; 129
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	88 60       	ori	r24, 0x08	; 8
 4f8:	80 83       	st	Z, r24
	
	// Establecer el valor de comparación para 2 segundos
	OCR1A = 62499; // 62499 cuentas para 2 segundos con prescaler 256
 4fa:	83 e2       	ldi	r24, 0x23	; 35
 4fc:	94 ef       	ldi	r25, 0xF4	; 244
 4fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 502:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Habilitar la interrupción por comparación de salida A
	TIMSK1 |= (1 << OCIE1A);
 506:	af e6       	ldi	r26, 0x6F	; 111
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	8c 91       	ld	r24, X
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	8c 93       	st	X, r24
	
	// Configurar el prescaler a 256 y arrancar el temporizador
	TCCR1B |= (1 << CS12); // CS12 = 1, CS11 = 0, CS10 = 0
 510:	80 81       	ld	r24, Z
 512:	84 60       	ori	r24, 0x04	; 4
 514:	80 83       	st	Z, r24
 516:	08 95       	ret

00000518 <__vector_11>:
}
// ISR para el evento de comparación del Timer1
ISR(TIMER1_COMPA_vect) {
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	8f 93       	push	r24
	Flag_TemHum = 1;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <Flag_TemHum>
}
 52a:	8f 91       	pop	r24
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <main>:
    // Inicializacion
	
	// Inicialización de los módulos
	//SerialPort_Init(103); // 9600 bps con un reloj de 16MHz
	//SerialPort_Init(51); // 9600 bps con un reloj de 8MHz
	SerialPort_Init(51); // Configurar UART a 9600bps, 8 bits de datos, 1 bit de parada @ F_CPU = 8MHz.
 536:	83 e3       	ldi	r24, 0x33	; 51
 538:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SerialPort_Init>
	SerialPort_TX_Enable(); // Habilitar transmisor USART.
 53c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); // Habilitar receptor USART.
 540:	0e 94 81 01 	call	0x302	; 0x302 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // Habilitar interrupción de receptor USART.
 544:	0e 94 87 01 	call	0x30e	; 0x30e <SerialPort_RX_Interrupt_Enable>
	
	// Inicialización del Timer1
	Timer1_Init();
 548:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Timer1_Init>
	
	// inicializacion de dht11 y ds3231
	DHT11_Init();
 54c:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Init>
	I2C_Init();	
 550:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Init>
	
	sei();
 554:	78 94       	sei
	
    while (1) {
	    
		if (Flag_TemHum) {
 556:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <Flag_TemHum>
 55a:	88 23       	and	r24, r24
 55c:	e1 f3       	breq	.-8      	; 0x556 <main+0x20>
		    Task_TemHum();
 55e:	0e 94 b1 01 	call	0x362	; 0x362 <Task_TemHum>
		    Flag_TemHum = 0;
 562:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Flag_TemHum>
 566:	f7 cf       	rjmp	.-18     	; 0x556 <main+0x20>

00000568 <snprintf>:
 568:	ae e0       	ldi	r26, 0x0E	; 14
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ea eb       	ldi	r30, 0xBA	; 186
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__prologue_saves__+0x1c>
 574:	0d 89       	ldd	r16, Y+21	; 0x15
 576:	1e 89       	ldd	r17, Y+22	; 0x16
 578:	8f 89       	ldd	r24, Y+23	; 0x17
 57a:	98 8d       	ldd	r25, Y+24	; 0x18
 57c:	26 e0       	ldi	r18, 0x06	; 6
 57e:	2c 83       	std	Y+4, r18	; 0x04
 580:	1a 83       	std	Y+2, r17	; 0x02
 582:	09 83       	std	Y+1, r16	; 0x01
 584:	97 ff       	sbrs	r25, 7
 586:	02 c0       	rjmp	.+4      	; 0x58c <snprintf+0x24>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e8       	ldi	r25, 0x80	; 128
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	9e 83       	std	Y+6, r25	; 0x06
 590:	8d 83       	std	Y+5, r24	; 0x05
 592:	ae 01       	movw	r20, r28
 594:	45 5e       	subi	r20, 0xE5	; 229
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	69 8d       	ldd	r22, Y+25	; 0x19
 59a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vfprintf>
 5a4:	4d 81       	ldd	r20, Y+5	; 0x05
 5a6:	5e 81       	ldd	r21, Y+6	; 0x06
 5a8:	57 fd       	sbrc	r21, 7
 5aa:	0a c0       	rjmp	.+20     	; 0x5c0 <snprintf+0x58>
 5ac:	2f 81       	ldd	r18, Y+7	; 0x07
 5ae:	38 85       	ldd	r19, Y+8	; 0x08
 5b0:	42 17       	cp	r20, r18
 5b2:	53 07       	cpc	r21, r19
 5b4:	0c f4       	brge	.+2      	; 0x5b8 <snprintf+0x50>
 5b6:	9a 01       	movw	r18, r20
 5b8:	f8 01       	movw	r30, r16
 5ba:	e2 0f       	add	r30, r18
 5bc:	f3 1f       	adc	r31, r19
 5be:	10 82       	st	Z, r1
 5c0:	2e 96       	adiw	r28, 0x0e	; 14
 5c2:	e4 e0       	ldi	r30, 0x04	; 4
 5c4:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__epilogue_restores__+0x1c>

000005c8 <vfprintf>:
 5c8:	ab e0       	ldi	r26, 0x0B	; 11
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	ea ee       	ldi	r30, 0xEA	; 234
 5ce:	f2 e0       	ldi	r31, 0x02	; 2
 5d0:	0c 94 75 05 	jmp	0xaea	; 0xaea <__prologue_saves__>
 5d4:	6c 01       	movw	r12, r24
 5d6:	7b 01       	movw	r14, r22
 5d8:	8a 01       	movw	r16, r20
 5da:	fc 01       	movw	r30, r24
 5dc:	17 82       	std	Z+7, r1	; 0x07
 5de:	16 82       	std	Z+6, r1	; 0x06
 5e0:	83 81       	ldd	r24, Z+3	; 0x03
 5e2:	81 ff       	sbrs	r24, 1
 5e4:	cc c1       	rjmp	.+920    	; 0x97e <__stack+0x7f>
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	3c 01       	movw	r6, r24
 5ec:	f6 01       	movw	r30, r12
 5ee:	93 81       	ldd	r25, Z+3	; 0x03
 5f0:	f7 01       	movw	r30, r14
 5f2:	93 fd       	sbrc	r25, 3
 5f4:	85 91       	lpm	r24, Z+
 5f6:	93 ff       	sbrs	r25, 3
 5f8:	81 91       	ld	r24, Z+
 5fa:	7f 01       	movw	r14, r30
 5fc:	88 23       	and	r24, r24
 5fe:	09 f4       	brne	.+2      	; 0x602 <vfprintf+0x3a>
 600:	ba c1       	rjmp	.+884    	; 0x976 <__stack+0x77>
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	39 f4       	brne	.+14     	; 0x614 <vfprintf+0x4c>
 606:	93 fd       	sbrc	r25, 3
 608:	85 91       	lpm	r24, Z+
 60a:	93 ff       	sbrs	r25, 3
 60c:	81 91       	ld	r24, Z+
 60e:	7f 01       	movw	r14, r30
 610:	85 32       	cpi	r24, 0x25	; 37
 612:	29 f4       	brne	.+10     	; 0x61e <vfprintf+0x56>
 614:	b6 01       	movw	r22, r12
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 61c:	e7 cf       	rjmp	.-50     	; 0x5ec <vfprintf+0x24>
 61e:	91 2c       	mov	r9, r1
 620:	21 2c       	mov	r2, r1
 622:	31 2c       	mov	r3, r1
 624:	ff e1       	ldi	r31, 0x1F	; 31
 626:	f3 15       	cp	r31, r3
 628:	d8 f0       	brcs	.+54     	; 0x660 <vfprintf+0x98>
 62a:	8b 32       	cpi	r24, 0x2B	; 43
 62c:	79 f0       	breq	.+30     	; 0x64c <vfprintf+0x84>
 62e:	38 f4       	brcc	.+14     	; 0x63e <vfprintf+0x76>
 630:	80 32       	cpi	r24, 0x20	; 32
 632:	79 f0       	breq	.+30     	; 0x652 <vfprintf+0x8a>
 634:	83 32       	cpi	r24, 0x23	; 35
 636:	a1 f4       	brne	.+40     	; 0x660 <vfprintf+0x98>
 638:	23 2d       	mov	r18, r3
 63a:	20 61       	ori	r18, 0x10	; 16
 63c:	1d c0       	rjmp	.+58     	; 0x678 <vfprintf+0xb0>
 63e:	8d 32       	cpi	r24, 0x2D	; 45
 640:	61 f0       	breq	.+24     	; 0x65a <vfprintf+0x92>
 642:	80 33       	cpi	r24, 0x30	; 48
 644:	69 f4       	brne	.+26     	; 0x660 <vfprintf+0x98>
 646:	23 2d       	mov	r18, r3
 648:	21 60       	ori	r18, 0x01	; 1
 64a:	16 c0       	rjmp	.+44     	; 0x678 <vfprintf+0xb0>
 64c:	83 2d       	mov	r24, r3
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	38 2e       	mov	r3, r24
 652:	e3 2d       	mov	r30, r3
 654:	e4 60       	ori	r30, 0x04	; 4
 656:	3e 2e       	mov	r3, r30
 658:	2a c0       	rjmp	.+84     	; 0x6ae <vfprintf+0xe6>
 65a:	f3 2d       	mov	r31, r3
 65c:	f8 60       	ori	r31, 0x08	; 8
 65e:	1d c0       	rjmp	.+58     	; 0x69a <vfprintf+0xd2>
 660:	37 fc       	sbrc	r3, 7
 662:	2d c0       	rjmp	.+90     	; 0x6be <vfprintf+0xf6>
 664:	20 ed       	ldi	r18, 0xD0	; 208
 666:	28 0f       	add	r18, r24
 668:	2a 30       	cpi	r18, 0x0A	; 10
 66a:	40 f0       	brcs	.+16     	; 0x67c <vfprintf+0xb4>
 66c:	8e 32       	cpi	r24, 0x2E	; 46
 66e:	b9 f4       	brne	.+46     	; 0x69e <vfprintf+0xd6>
 670:	36 fc       	sbrc	r3, 6
 672:	81 c1       	rjmp	.+770    	; 0x976 <__stack+0x77>
 674:	23 2d       	mov	r18, r3
 676:	20 64       	ori	r18, 0x40	; 64
 678:	32 2e       	mov	r3, r18
 67a:	19 c0       	rjmp	.+50     	; 0x6ae <vfprintf+0xe6>
 67c:	36 fe       	sbrs	r3, 6
 67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0xc4>
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	98 9e       	mul	r9, r24
 684:	20 0d       	add	r18, r0
 686:	11 24       	eor	r1, r1
 688:	92 2e       	mov	r9, r18
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <vfprintf+0xe6>
 68c:	ea e0       	ldi	r30, 0x0A	; 10
 68e:	2e 9e       	mul	r2, r30
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	22 2e       	mov	r2, r18
 696:	f3 2d       	mov	r31, r3
 698:	f0 62       	ori	r31, 0x20	; 32
 69a:	3f 2e       	mov	r3, r31
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <vfprintf+0xe6>
 69e:	8c 36       	cpi	r24, 0x6C	; 108
 6a0:	21 f4       	brne	.+8      	; 0x6aa <vfprintf+0xe2>
 6a2:	83 2d       	mov	r24, r3
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	38 2e       	mov	r3, r24
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <vfprintf+0xe6>
 6aa:	88 36       	cpi	r24, 0x68	; 104
 6ac:	41 f4       	brne	.+16     	; 0x6be <vfprintf+0xf6>
 6ae:	f7 01       	movw	r30, r14
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	81 11       	cpse	r24, r1
 6bc:	b3 cf       	rjmp	.-154    	; 0x624 <vfprintf+0x5c>
 6be:	98 2f       	mov	r25, r24
 6c0:	9f 7d       	andi	r25, 0xDF	; 223
 6c2:	95 54       	subi	r25, 0x45	; 69
 6c4:	93 30       	cpi	r25, 0x03	; 3
 6c6:	28 f4       	brcc	.+10     	; 0x6d2 <vfprintf+0x10a>
 6c8:	0c 5f       	subi	r16, 0xFC	; 252
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	9f e3       	ldi	r25, 0x3F	; 63
 6ce:	99 83       	std	Y+1, r25	; 0x01
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <vfprintf+0x124>
 6d2:	83 36       	cpi	r24, 0x63	; 99
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <vfprintf+0x11a>
 6d6:	83 37       	cpi	r24, 0x73	; 115
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <vfprintf+0x12e>
 6da:	83 35       	cpi	r24, 0x53	; 83
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <vfprintf+0x118>
 6de:	59 c0       	rjmp	.+178    	; 0x792 <vfprintf+0x1ca>
 6e0:	21 c0       	rjmp	.+66     	; 0x724 <vfprintf+0x15c>
 6e2:	f8 01       	movw	r30, r16
 6e4:	80 81       	ld	r24, Z
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	0e 5f       	subi	r16, 0xFE	; 254
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	88 24       	eor	r8, r8
 6ee:	83 94       	inc	r8
 6f0:	91 2c       	mov	r9, r1
 6f2:	53 01       	movw	r10, r6
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <vfprintf+0x154>
 6f6:	28 01       	movw	r4, r16
 6f8:	f2 e0       	ldi	r31, 0x02	; 2
 6fa:	4f 0e       	add	r4, r31
 6fc:	51 1c       	adc	r5, r1
 6fe:	f8 01       	movw	r30, r16
 700:	a0 80       	ld	r10, Z
 702:	b1 80       	ldd	r11, Z+1	; 0x01
 704:	36 fe       	sbrs	r3, 6
 706:	03 c0       	rjmp	.+6      	; 0x70e <vfprintf+0x146>
 708:	69 2d       	mov	r22, r9
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x14a>
 70e:	6f ef       	ldi	r22, 0xFF	; 255
 710:	7f ef       	ldi	r23, 0xFF	; 255
 712:	c5 01       	movw	r24, r10
 714:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <strnlen>
 718:	4c 01       	movw	r8, r24
 71a:	82 01       	movw	r16, r4
 71c:	f3 2d       	mov	r31, r3
 71e:	ff 77       	andi	r31, 0x7F	; 127
 720:	3f 2e       	mov	r3, r31
 722:	16 c0       	rjmp	.+44     	; 0x750 <vfprintf+0x188>
 724:	28 01       	movw	r4, r16
 726:	22 e0       	ldi	r18, 0x02	; 2
 728:	42 0e       	add	r4, r18
 72a:	51 1c       	adc	r5, r1
 72c:	f8 01       	movw	r30, r16
 72e:	a0 80       	ld	r10, Z
 730:	b1 80       	ldd	r11, Z+1	; 0x01
 732:	36 fe       	sbrs	r3, 6
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x174>
 736:	69 2d       	mov	r22, r9
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x178>
 73c:	6f ef       	ldi	r22, 0xFF	; 255
 73e:	7f ef       	ldi	r23, 0xFF	; 255
 740:	c5 01       	movw	r24, r10
 742:	0e 94 c5 04 	call	0x98a	; 0x98a <strnlen_P>
 746:	4c 01       	movw	r8, r24
 748:	f3 2d       	mov	r31, r3
 74a:	f0 68       	ori	r31, 0x80	; 128
 74c:	3f 2e       	mov	r3, r31
 74e:	82 01       	movw	r16, r4
 750:	33 fc       	sbrc	r3, 3
 752:	1b c0       	rjmp	.+54     	; 0x78a <vfprintf+0x1c2>
 754:	82 2d       	mov	r24, r2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	88 16       	cp	r8, r24
 75a:	99 06       	cpc	r9, r25
 75c:	b0 f4       	brcc	.+44     	; 0x78a <vfprintf+0x1c2>
 75e:	b6 01       	movw	r22, r12
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 768:	2a 94       	dec	r2
 76a:	f4 cf       	rjmp	.-24     	; 0x754 <vfprintf+0x18c>
 76c:	f5 01       	movw	r30, r10
 76e:	37 fc       	sbrc	r3, 7
 770:	85 91       	lpm	r24, Z+
 772:	37 fe       	sbrs	r3, 7
 774:	81 91       	ld	r24, Z+
 776:	5f 01       	movw	r10, r30
 778:	b6 01       	movw	r22, r12
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 780:	21 10       	cpse	r2, r1
 782:	2a 94       	dec	r2
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	82 1a       	sub	r8, r18
 788:	91 08       	sbc	r9, r1
 78a:	81 14       	cp	r8, r1
 78c:	91 04       	cpc	r9, r1
 78e:	71 f7       	brne	.-36     	; 0x76c <vfprintf+0x1a4>
 790:	e8 c0       	rjmp	.+464    	; 0x962 <__stack+0x63>
 792:	84 36       	cpi	r24, 0x64	; 100
 794:	11 f0       	breq	.+4      	; 0x79a <vfprintf+0x1d2>
 796:	89 36       	cpi	r24, 0x69	; 105
 798:	41 f5       	brne	.+80     	; 0x7ea <vfprintf+0x222>
 79a:	f8 01       	movw	r30, r16
 79c:	37 fe       	sbrs	r3, 7
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <vfprintf+0x1e6>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	82 81       	ldd	r24, Z+2	; 0x02
 7a6:	93 81       	ldd	r25, Z+3	; 0x03
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <vfprintf+0x1f6>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	07 2e       	mov	r0, r23
 7b4:	00 0c       	add	r0, r0
 7b6:	88 0b       	sbc	r24, r24
 7b8:	99 0b       	sbc	r25, r25
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	f3 2d       	mov	r31, r3
 7c0:	ff 76       	andi	r31, 0x6F	; 111
 7c2:	3f 2e       	mov	r3, r31
 7c4:	97 ff       	sbrs	r25, 7
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <vfprintf+0x212>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	f0 68       	ori	r31, 0x80	; 128
 7d8:	3f 2e       	mov	r3, r31
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	a3 01       	movw	r20, r6
 7e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <__ultoa_invert>
 7e4:	88 2e       	mov	r8, r24
 7e6:	86 18       	sub	r8, r6
 7e8:	45 c0       	rjmp	.+138    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 7ea:	85 37       	cpi	r24, 0x75	; 117
 7ec:	31 f4       	brne	.+12     	; 0x7fa <vfprintf+0x232>
 7ee:	23 2d       	mov	r18, r3
 7f0:	2f 7e       	andi	r18, 0xEF	; 239
 7f2:	b2 2e       	mov	r11, r18
 7f4:	2a e0       	ldi	r18, 0x0A	; 10
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	25 c0       	rjmp	.+74     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7fa:	93 2d       	mov	r25, r3
 7fc:	99 7f       	andi	r25, 0xF9	; 249
 7fe:	b9 2e       	mov	r11, r25
 800:	8f 36       	cpi	r24, 0x6F	; 111
 802:	c1 f0       	breq	.+48     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 804:	18 f4       	brcc	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	88 35       	cpi	r24, 0x58	; 88
 808:	79 f0       	breq	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	b5 c0       	rjmp	.+362    	; 0x976 <__stack+0x77>
 80c:	80 37       	cpi	r24, 0x70	; 112
 80e:	19 f0       	breq	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	88 37       	cpi	r24, 0x78	; 120
 812:	21 f0       	breq	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	b0 c0       	rjmp	.+352    	; 0x976 <__stack+0x77>
 816:	e9 2f       	mov	r30, r25
 818:	e0 61       	ori	r30, 0x10	; 16
 81a:	be 2e       	mov	r11, r30
 81c:	b4 fe       	sbrs	r11, 4
 81e:	0d c0       	rjmp	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 820:	fb 2d       	mov	r31, r11
 822:	f4 60       	ori	r31, 0x04	; 4
 824:	bf 2e       	mov	r11, r31
 826:	09 c0       	rjmp	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 828:	34 fe       	sbrs	r3, 4
 82a:	0a c0       	rjmp	.+20     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82c:	29 2f       	mov	r18, r25
 82e:	26 60       	ori	r18, 0x06	; 6
 830:	b2 2e       	mov	r11, r18
 832:	06 c0       	rjmp	.+12     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 834:	28 e0       	ldi	r18, 0x08	; 8
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	05 c0       	rjmp	.+10     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83a:	20 e1       	ldi	r18, 0x10	; 16
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 840:	20 e1       	ldi	r18, 0x10	; 16
 842:	32 e0       	ldi	r19, 0x02	; 2
 844:	f8 01       	movw	r30, r16
 846:	b7 fe       	sbrs	r11, 7
 848:	07 c0       	rjmp	.+14     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	82 81       	ldd	r24, Z+2	; 0x02
 850:	93 81       	ldd	r25, Z+3	; 0x03
 852:	0c 5f       	subi	r16, 0xFC	; 252
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	06 c0       	rjmp	.+12     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 858:	60 81       	ld	r22, Z
 85a:	71 81       	ldd	r23, Z+1	; 0x01
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 5f       	subi	r16, 0xFE	; 254
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	a3 01       	movw	r20, r6
 866:	0e 94 17 05 	call	0xa2e	; 0xa2e <__ultoa_invert>
 86a:	88 2e       	mov	r8, r24
 86c:	86 18       	sub	r8, r6
 86e:	fb 2d       	mov	r31, r11
 870:	ff 77       	andi	r31, 0x7F	; 127
 872:	3f 2e       	mov	r3, r31
 874:	36 fe       	sbrs	r3, 6
 876:	0d c0       	rjmp	.+26     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 878:	23 2d       	mov	r18, r3
 87a:	2e 7f       	andi	r18, 0xFE	; 254
 87c:	a2 2e       	mov	r10, r18
 87e:	89 14       	cp	r8, r9
 880:	58 f4       	brcc	.+22     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 882:	34 fe       	sbrs	r3, 4
 884:	0b c0       	rjmp	.+22     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 886:	32 fc       	sbrc	r3, 2
 888:	09 c0       	rjmp	.+18     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88a:	83 2d       	mov	r24, r3
 88c:	8e 7e       	andi	r24, 0xEE	; 238
 88e:	a8 2e       	mov	r10, r24
 890:	05 c0       	rjmp	.+10     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 892:	b8 2c       	mov	r11, r8
 894:	a3 2c       	mov	r10, r3
 896:	03 c0       	rjmp	.+6      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 898:	b8 2c       	mov	r11, r8
 89a:	01 c0       	rjmp	.+2      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 89c:	b9 2c       	mov	r11, r9
 89e:	a4 fe       	sbrs	r10, 4
 8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a2:	fe 01       	movw	r30, r28
 8a4:	e8 0d       	add	r30, r8
 8a6:	f1 1d       	adc	r31, r1
 8a8:	80 81       	ld	r24, Z
 8aa:	80 33       	cpi	r24, 0x30	; 48
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ae:	9a 2d       	mov	r25, r10
 8b0:	99 7e       	andi	r25, 0xE9	; 233
 8b2:	a9 2e       	mov	r10, r25
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8b6:	a2 fe       	sbrs	r10, 2
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ba:	b3 94       	inc	r11
 8bc:	b3 94       	inc	r11
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c0:	8a 2d       	mov	r24, r10
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c6:	b3 94       	inc	r11
 8c8:	a3 fc       	sbrc	r10, 3
 8ca:	11 c0       	rjmp	.+34     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8cc:	a0 fe       	sbrs	r10, 0
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d0:	b2 14       	cp	r11, r2
 8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8d4:	28 0c       	add	r2, r8
 8d6:	92 2c       	mov	r9, r2
 8d8:	9b 18       	sub	r9, r11
 8da:	0e c0       	rjmp	.+28     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8dc:	b2 14       	cp	r11, r2
 8de:	60 f4       	brcc	.+24     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e0:	b6 01       	movw	r22, r12
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 8ea:	b3 94       	inc	r11
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ee:	b2 14       	cp	r11, r2
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8f2:	2b 18       	sub	r2, r11
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f6:	98 2c       	mov	r9, r8
 8f8:	21 2c       	mov	r2, r1
 8fa:	a4 fe       	sbrs	r10, 4
 8fc:	10 c0       	rjmp	.+32     	; 0x91e <__stack+0x1f>
 8fe:	b6 01       	movw	r22, r12
 900:	80 e3       	ldi	r24, 0x30	; 48
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 908:	a2 fe       	sbrs	r10, 2
 90a:	17 c0       	rjmp	.+46     	; 0x93a <__stack+0x3b>
 90c:	a1 fc       	sbrc	r10, 1
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
 910:	88 e7       	ldi	r24, 0x78	; 120
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	88 e5       	ldi	r24, 0x58	; 88
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	b6 01       	movw	r22, r12
 91c:	0c c0       	rjmp	.+24     	; 0x936 <__stack+0x37>
 91e:	8a 2d       	mov	r24, r10
 920:	86 78       	andi	r24, 0x86	; 134
 922:	59 f0       	breq	.+22     	; 0x93a <__stack+0x3b>
 924:	a1 fe       	sbrs	r10, 1
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	8b e2       	ldi	r24, 0x2B	; 43
 92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	a7 fc       	sbrc	r10, 7
 930:	8d e2       	ldi	r24, 0x2D	; 45
 932:	b6 01       	movw	r22, r12
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 93a:	89 14       	cp	r8, r9
 93c:	38 f4       	brcc	.+14     	; 0x94c <__stack+0x4d>
 93e:	b6 01       	movw	r22, r12
 940:	80 e3       	ldi	r24, 0x30	; 48
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 948:	9a 94       	dec	r9
 94a:	f7 cf       	rjmp	.-18     	; 0x93a <__stack+0x3b>
 94c:	8a 94       	dec	r8
 94e:	f3 01       	movw	r30, r6
 950:	e8 0d       	add	r30, r8
 952:	f1 1d       	adc	r31, r1
 954:	80 81       	ld	r24, Z
 956:	b6 01       	movw	r22, r12
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 95e:	81 10       	cpse	r8, r1
 960:	f5 cf       	rjmp	.-22     	; 0x94c <__stack+0x4d>
 962:	22 20       	and	r2, r2
 964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
 966:	42 ce       	rjmp	.-892    	; 0x5ec <vfprintf+0x24>
 968:	b6 01       	movw	r22, r12
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 972:	2a 94       	dec	r2
 974:	f6 cf       	rjmp	.-20     	; 0x962 <__stack+0x63>
 976:	f6 01       	movw	r30, r12
 978:	86 81       	ldd	r24, Z+6	; 0x06
 97a:	97 81       	ldd	r25, Z+7	; 0x07
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	2b 96       	adiw	r28, 0x0b	; 11
 984:	e2 e1       	ldi	r30, 0x12	; 18
 986:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__epilogue_restores__>

0000098a <strnlen_P>:
 98a:	fc 01       	movw	r30, r24
 98c:	05 90       	lpm	r0, Z+
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	01 10       	cpse	r0, r1
 994:	d8 f7       	brcc	.-10     	; 0x98c <strnlen_P+0x2>
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	8e 0f       	add	r24, r30
 99c:	9f 1f       	adc	r25, r31
 99e:	08 95       	ret

000009a0 <strnlen>:
 9a0:	fc 01       	movw	r30, r24
 9a2:	61 50       	subi	r22, 0x01	; 1
 9a4:	70 40       	sbci	r23, 0x00	; 0
 9a6:	01 90       	ld	r0, Z+
 9a8:	01 10       	cpse	r0, r1
 9aa:	d8 f7       	brcc	.-10     	; 0x9a2 <strnlen+0x2>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	8e 0f       	add	r24, r30
 9b2:	9f 1f       	adc	r25, r31
 9b4:	08 95       	ret

000009b6 <fputc>:
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	fb 01       	movw	r30, r22
 9c0:	23 81       	ldd	r18, Z+3	; 0x03
 9c2:	21 fd       	sbrc	r18, 1
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <fputc+0x16>
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	2c c0       	rjmp	.+88     	; 0xa24 <fputc+0x6e>
 9cc:	22 ff       	sbrs	r18, 2
 9ce:	16 c0       	rjmp	.+44     	; 0x9fc <fputc+0x46>
 9d0:	46 81       	ldd	r20, Z+6	; 0x06
 9d2:	57 81       	ldd	r21, Z+7	; 0x07
 9d4:	24 81       	ldd	r18, Z+4	; 0x04
 9d6:	35 81       	ldd	r19, Z+5	; 0x05
 9d8:	42 17       	cp	r20, r18
 9da:	53 07       	cpc	r21, r19
 9dc:	44 f4       	brge	.+16     	; 0x9ee <fputc+0x38>
 9de:	a0 81       	ld	r26, Z
 9e0:	b1 81       	ldd	r27, Z+1	; 0x01
 9e2:	9d 01       	movw	r18, r26
 9e4:	2f 5f       	subi	r18, 0xFF	; 255
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	31 83       	std	Z+1, r19	; 0x01
 9ea:	20 83       	st	Z, r18
 9ec:	8c 93       	st	X, r24
 9ee:	26 81       	ldd	r18, Z+6	; 0x06
 9f0:	37 81       	ldd	r19, Z+7	; 0x07
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	3f 4f       	sbci	r19, 0xFF	; 255
 9f6:	37 83       	std	Z+7, r19	; 0x07
 9f8:	26 83       	std	Z+6, r18	; 0x06
 9fa:	14 c0       	rjmp	.+40     	; 0xa24 <fputc+0x6e>
 9fc:	8b 01       	movw	r16, r22
 9fe:	ec 01       	movw	r28, r24
 a00:	fb 01       	movw	r30, r22
 a02:	00 84       	ldd	r0, Z+8	; 0x08
 a04:	f1 85       	ldd	r31, Z+9	; 0x09
 a06:	e0 2d       	mov	r30, r0
 a08:	09 95       	icall
 a0a:	89 2b       	or	r24, r25
 a0c:	e1 f6       	brne	.-72     	; 0x9c6 <fputc+0x10>
 a0e:	d8 01       	movw	r26, r16
 a10:	16 96       	adiw	r26, 0x06	; 6
 a12:	8d 91       	ld	r24, X+
 a14:	9c 91       	ld	r25, X
 a16:	17 97       	sbiw	r26, 0x07	; 7
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	9c 93       	st	X, r25
 a1e:	8e 93       	st	-X, r24
 a20:	16 97       	sbiw	r26, 0x06	; 6
 a22:	ce 01       	movw	r24, r28
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <__ultoa_invert>:
 a2e:	fa 01       	movw	r30, r20
 a30:	aa 27       	eor	r26, r26
 a32:	28 30       	cpi	r18, 0x08	; 8
 a34:	51 f1       	breq	.+84     	; 0xa8a <__ultoa_invert+0x5c>
 a36:	20 31       	cpi	r18, 0x10	; 16
 a38:	81 f1       	breq	.+96     	; 0xa9a <__ultoa_invert+0x6c>
 a3a:	e8 94       	clt
 a3c:	6f 93       	push	r22
 a3e:	6e 7f       	andi	r22, 0xFE	; 254
 a40:	6e 5f       	subi	r22, 0xFE	; 254
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	af 4f       	sbci	r26, 0xFF	; 255
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	3e d0       	rcall	.+124    	; 0xaca <__ultoa_invert+0x9c>
 a4e:	b4 e0       	ldi	r27, 0x04	; 4
 a50:	3c d0       	rcall	.+120    	; 0xaca <__ultoa_invert+0x9c>
 a52:	67 0f       	add	r22, r23
 a54:	78 1f       	adc	r23, r24
 a56:	89 1f       	adc	r24, r25
 a58:	9a 1f       	adc	r25, r26
 a5a:	a1 1d       	adc	r26, r1
 a5c:	68 0f       	add	r22, r24
 a5e:	79 1f       	adc	r23, r25
 a60:	8a 1f       	adc	r24, r26
 a62:	91 1d       	adc	r25, r1
 a64:	a1 1d       	adc	r26, r1
 a66:	6a 0f       	add	r22, r26
 a68:	71 1d       	adc	r23, r1
 a6a:	81 1d       	adc	r24, r1
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	20 d0       	rcall	.+64     	; 0xab2 <__ultoa_invert+0x84>
 a72:	09 f4       	brne	.+2      	; 0xa76 <__ultoa_invert+0x48>
 a74:	68 94       	set
 a76:	3f 91       	pop	r19
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	26 9f       	mul	r18, r22
 a7c:	11 24       	eor	r1, r1
 a7e:	30 19       	sub	r19, r0
 a80:	30 5d       	subi	r19, 0xD0	; 208
 a82:	31 93       	st	Z+, r19
 a84:	de f6       	brtc	.-74     	; 0xa3c <__ultoa_invert+0xe>
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret
 a8a:	46 2f       	mov	r20, r22
 a8c:	47 70       	andi	r20, 0x07	; 7
 a8e:	40 5d       	subi	r20, 0xD0	; 208
 a90:	41 93       	st	Z+, r20
 a92:	b3 e0       	ldi	r27, 0x03	; 3
 a94:	0f d0       	rcall	.+30     	; 0xab4 <__ultoa_invert+0x86>
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__ultoa_invert+0x5c>
 a98:	f6 cf       	rjmp	.-20     	; 0xa86 <__ultoa_invert+0x58>
 a9a:	46 2f       	mov	r20, r22
 a9c:	4f 70       	andi	r20, 0x0F	; 15
 a9e:	40 5d       	subi	r20, 0xD0	; 208
 aa0:	4a 33       	cpi	r20, 0x3A	; 58
 aa2:	18 f0       	brcs	.+6      	; 0xaaa <__ultoa_invert+0x7c>
 aa4:	49 5d       	subi	r20, 0xD9	; 217
 aa6:	31 fd       	sbrc	r19, 1
 aa8:	40 52       	subi	r20, 0x20	; 32
 aaa:	41 93       	st	Z+, r20
 aac:	02 d0       	rcall	.+4      	; 0xab2 <__ultoa_invert+0x84>
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__ultoa_invert+0x6c>
 ab0:	ea cf       	rjmp	.-44     	; 0xa86 <__ultoa_invert+0x58>
 ab2:	b4 e0       	ldi	r27, 0x04	; 4
 ab4:	a6 95       	lsr	r26
 ab6:	97 95       	ror	r25
 ab8:	87 95       	ror	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	ba 95       	dec	r27
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__ultoa_invert+0x86>
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	61 05       	cpc	r22, r1
 ac6:	71 05       	cpc	r23, r1
 ac8:	08 95       	ret
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	0a 2e       	mov	r0, r26
 ad0:	06 94       	lsr	r0
 ad2:	57 95       	ror	r21
 ad4:	47 95       	ror	r20
 ad6:	37 95       	ror	r19
 ad8:	27 95       	ror	r18
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__ultoa_invert+0xa2>
 ade:	62 0f       	add	r22, r18
 ae0:	73 1f       	adc	r23, r19
 ae2:	84 1f       	adc	r24, r20
 ae4:	95 1f       	adc	r25, r21
 ae6:	a0 1d       	adc	r26, r0
 ae8:	08 95       	ret

00000aea <__prologue_saves__>:
 aea:	2f 92       	push	r2
 aec:	3f 92       	push	r3
 aee:	4f 92       	push	r4
 af0:	5f 92       	push	r5
 af2:	6f 92       	push	r6
 af4:	7f 92       	push	r7
 af6:	8f 92       	push	r8
 af8:	9f 92       	push	r9
 afa:	af 92       	push	r10
 afc:	bf 92       	push	r11
 afe:	cf 92       	push	r12
 b00:	df 92       	push	r13
 b02:	ef 92       	push	r14
 b04:	ff 92       	push	r15
 b06:	0f 93       	push	r16
 b08:	1f 93       	push	r17
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
 b12:	ca 1b       	sub	r28, r26
 b14:	db 0b       	sbc	r29, r27
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	de bf       	out	0x3e, r29	; 62
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	cd bf       	out	0x3d, r28	; 61
 b20:	09 94       	ijmp

00000b22 <__epilogue_restores__>:
 b22:	2a 88       	ldd	r2, Y+18	; 0x12
 b24:	39 88       	ldd	r3, Y+17	; 0x11
 b26:	48 88       	ldd	r4, Y+16	; 0x10
 b28:	5f 84       	ldd	r5, Y+15	; 0x0f
 b2a:	6e 84       	ldd	r6, Y+14	; 0x0e
 b2c:	7d 84       	ldd	r7, Y+13	; 0x0d
 b2e:	8c 84       	ldd	r8, Y+12	; 0x0c
 b30:	9b 84       	ldd	r9, Y+11	; 0x0b
 b32:	aa 84       	ldd	r10, Y+10	; 0x0a
 b34:	b9 84       	ldd	r11, Y+9	; 0x09
 b36:	c8 84       	ldd	r12, Y+8	; 0x08
 b38:	df 80       	ldd	r13, Y+7	; 0x07
 b3a:	ee 80       	ldd	r14, Y+6	; 0x06
 b3c:	fd 80       	ldd	r15, Y+5	; 0x05
 b3e:	0c 81       	ldd	r16, Y+4	; 0x04
 b40:	1b 81       	ldd	r17, Y+3	; 0x03
 b42:	aa 81       	ldd	r26, Y+2	; 0x02
 b44:	b9 81       	ldd	r27, Y+1	; 0x01
 b46:	ce 0f       	add	r28, r30
 b48:	d1 1d       	adc	r29, r1
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	ed 01       	movw	r28, r26
 b56:	08 95       	ret

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
