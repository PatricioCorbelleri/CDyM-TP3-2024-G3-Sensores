
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080015c  0080015c  00000b5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001300  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b77  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af9  00000000  00000000  00002bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000036d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071e  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007af  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000048d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 35       	cpi	r26, 0x5F	; 95
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 02 	call	0x444	; 0x444 <main>
  9e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_Init>:
#define DHT11_DDR DDRC
#define DHT11_PORT PORTC
#define DHT11_PIN_INPUT PINC

void DHT11_Init(void) {
	DHT11_DDR |= (1 << DHT11_PIN); // Configura el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	DHT11_PORT |= (1 << DHT11_PIN); // Establece el pin en alto
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <DHT11_Read>:
uint8_t DHT11_Read(uint8_t *temperature, uint8_t *humidity) {
	uint8_t bits[5];
	uint8_t i, j = 0;

	// Reset port
	DHT11_PORT &= ~(1 << DHT11_PIN); // Lleva el pin a bajo
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	80 ee       	ldi	r24, 0xE0	; 224
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <DHT11_Read+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <DHT11_Read+0x16>
  ca:	00 00       	nop
	_delay_ms(18); // Mantén bajo por al menos 18 ms
	DHT11_PORT |= (1 << DHT11_PIN); // Lleva el pin a alto
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2a e6       	ldi	r18, 0x6A	; 106
  d4:	2a 95       	dec	r18
  d6:	f1 f7       	brne	.-4      	; 0xd4 <DHT11_Read+0x20>
  d8:	00 c0       	rjmp	.+0      	; 0xda <DHT11_Read+0x26>
	_delay_us(20); // Espera 20 us
	DHT11_DDR &= ~(1 << DHT11_PIN); // Configura el pin como entrada
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	87 b9       	out	0x07, r24	; 7
  e0:	85 ed       	ldi	r24, 0xD5	; 213
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <DHT11_Read+0x2e>
  e6:	00 00       	nop

	// Siempre retorna 1

	_delay_us(40);
	if (DHT11_PIN_INPUT & (1 << DHT11_PIN)) {
  e8:	30 99       	sbic	0x06, 0	; 6
  ea:	0f c0       	rjmp	.+30     	; 0x10a <DHT11_Read+0x56>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <DHT11_Read+0x3c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <DHT11_Read+0x42>
  f6:	00 00       	nop
		return 1; // Error: no se detectó respuesta del DHT11
	}
	_delay_us(80);
	if (!(DHT11_PIN_INPUT & (1 << DHT11_PIN))) {
  f8:	30 9b       	sbis	0x06, 0	; 6
  fa:	07 c0       	rjmp	.+14     	; 0x10a <DHT11_Read+0x56>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <DHT11_Read+0x4c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <DHT11_Read+0x52>
 106:	00 00       	nop
 108:	ff cf       	rjmp	.-2      	; 0x108 <DHT11_Read+0x54>
	}

	*humidity = bits[0];
	*temperature = bits[2];
	return 0; // Lectura exitosa
}
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <I2C_Init>:
#include <avr/io.h>
#include <util/twi.h>
#include <DS3231.h>

void I2C_Init(void) {
	TWSR = 0x00;
 10e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x47;
 112:	87 e4       	ldi	r24, 0x47	; 71
 114:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11e:	08 95       	ret

00000120 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 120:	84 ea       	ldi	r24, 0xA4	; 164
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 126:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12a:	88 23       	and	r24, r24
 12c:	e4 f7       	brge	.-8      	; 0x126 <I2C_Start+0x6>
}
 12e:	08 95       	ret

00000130 <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 130:	84 e9       	ldi	r24, 0x94	; 148
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 136:	08 95       	ret

00000138 <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 138:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 142:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	88 23       	and	r24, r24
 148:	e4 f7       	brge	.-8      	; 0x142 <I2C_Write+0xa>
}
 14a:	08 95       	ret

0000014c <I2C_Read_Ack>:

uint8_t I2C_Read_Ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 14c:	84 ec       	ldi	r24, 0xC4	; 196
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 152:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 156:	88 23       	and	r24, r24
 158:	e4 f7       	brge	.-8      	; 0x152 <I2C_Read_Ack+0x6>
	return TWDR;
 15a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 15e:	08 95       	ret

00000160 <I2C_Read_NAck>:

uint8_t I2C_Read_NAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 166:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 16a:	88 23       	and	r24, r24
 16c:	e4 f7       	brge	.-8      	; 0x166 <I2C_Read_NAck+0x6>
	return TWDR;
 16e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 172:	08 95       	ret

00000174 <DS3231_GetTime>:

void DS3231_GetTime(uint8_t *hour, uint8_t *minute, uint8_t *second) {
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	8b 01       	movw	r16, r22
 184:	7a 01       	movw	r14, r20
	I2C_Start();
 186:	0e 94 90 00 	call	0x120	; 0x120 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 18a:	80 ed       	ldi	r24, 0xD0	; 208
 18c:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	I2C_Write(0x00);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	I2C_Start();
 196:	0e 94 90 00 	call	0x120	; 0x120 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 19a:	81 ed       	ldi	r24, 0xD1	; 209
 19c:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	*second = I2C_Read_Ack();
 1a0:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Read_Ack>
 1a4:	f7 01       	movw	r30, r14
 1a6:	80 83       	st	Z, r24
	*minute = I2C_Read_Ack();
 1a8:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Read_Ack>
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 83       	st	Z, r24
	*hour = I2C_Read_NAck();
 1b0:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_Read_NAck>
 1b4:	88 83       	st	Y, r24
	I2C_Stop();
 1b6:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	08 95       	ret

000001c8 <DS3231_GetDate>:

void DS3231_GetDate(uint8_t *day, uint8_t *month, uint8_t *year) {
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	7c 01       	movw	r14, r24
 1d6:	8b 01       	movw	r16, r22
 1d8:	ea 01       	movw	r28, r20
	I2C_Start();
 1da:	0e 94 90 00 	call	0x120	; 0x120 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_WRITE);
 1de:	80 ed       	ldi	r24, 0xD0	; 208
 1e0:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	I2C_Write(0x04);
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	I2C_Start();
 1ea:	0e 94 90 00 	call	0x120	; 0x120 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | TW_READ);
 1ee:	81 ed       	ldi	r24, 0xD1	; 209
 1f0:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	*day = I2C_Read_Ack();
 1f4:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Read_Ack>
 1f8:	f7 01       	movw	r30, r14
 1fa:	80 83       	st	Z, r24
	*month = I2C_Read_Ack();
 1fc:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Read_Ack>
 200:	f8 01       	movw	r30, r16
 202:	80 83       	st	Z, r24
	*year = I2C_Read_NAck();
 204:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_Read_NAck>
 208:	88 83       	st	Y, r24
	I2C_Stop();
 20a:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	08 95       	ret

0000021c <SerialPort_Init>:
 21c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 220:	96 e0       	ldi	r25, 0x06	; 6
 222:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 226:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 22a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 22e:	08 95       	ret

00000230 <SerialPort_TX_Enable>:
 230:	e1 ec       	ldi	r30, 0xC1	; 193
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <SerialPort_RX_Enable>:
 23c:	e1 ec       	ldi	r30, 0xC1	; 193
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 61       	ori	r24, 0x10	; 16
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <SerialPort_RX_Interrupt_Enable>:
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <SerialPort_Wait_For_TX_Buffer_Free>:
 254:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 258:	85 ff       	sbrs	r24, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <SerialPort_Wait_For_TX_Buffer_Free>
 25c:	08 95       	ret

0000025e <SerialPort_Send_Data>:
 25e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 262:	08 95       	ret

00000264 <SerialPort_Send_String>:
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	7c 01       	movw	r14, r24
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	07 c0       	rjmp	.+14     	; 0x282 <SerialPort_Send_String+0x1e>
 274:	0e 94 2a 01 	call	0x254	; 0x254 <SerialPort_Wait_For_TX_Buffer_Free>
 278:	f8 01       	movw	r30, r16
 27a:	80 81       	ld	r24, Z
 27c:	0e 94 2f 01 	call	0x25e	; 0x25e <SerialPort_Send_Data>
 280:	cf 5f       	subi	r28, 0xFF	; 255
 282:	87 01       	movw	r16, r14
 284:	0c 0f       	add	r16, r28
 286:	11 1d       	adc	r17, r1
 288:	f8 01       	movw	r30, r16
 28a:	80 81       	ld	r24, Z
 28c:	81 11       	cpse	r24, r1
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <SerialPort_Send_String+0x10>
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	08 95       	ret

0000029c <Task_TemHum>:
#include <stdio.h>

extern volatile uint8_t Flag_SendData;
extern char msg2[];

void Task_TemHum(void) {
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	cc 56       	subi	r28, 0x6C	; 108
 2a6:	d1 09       	sbc	r29, r1
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t temperature = 0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t humidity = 0;
 2b4:	1a 82       	std	Y+2, r1	; 0x02

	if (DHT11_Read(&temperature, &humidity) == 0) {
 2b6:	be 01       	movw	r22, r28
 2b8:	6e 5f       	subi	r22, 0xFE	; 254
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 5a 00 	call	0xb4	; 0xb4 <DHT11_Read>
 2c4:	81 11       	cpse	r24, r1
 2c6:	54 c0       	rjmp	.+168    	; 0x370 <Task_TemHum+0xd4>
		// while (1); nunca entra aca
		char buffer[100];
		uint8_t hour, minute, second, day, month, year;
		DS3231_GetTime(&hour, &minute, &second);
 2c8:	ae 01       	movw	r20, r28
 2ca:	46 59       	subi	r20, 0x96	; 150
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	be 01       	movw	r22, r28
 2d0:	65 59       	subi	r22, 0x95	; 149
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	ce 01       	movw	r24, r28
 2d6:	84 59       	subi	r24, 0x94	; 148
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	0e 94 ba 00 	call	0x174	; 0x174 <DS3231_GetTime>
		DS3231_GetDate(&day, &month, &year);
 2de:	ae 01       	movw	r20, r28
 2e0:	49 59       	subi	r20, 0x99	; 153
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	be 01       	movw	r22, r28
 2e6:	68 59       	subi	r22, 0x98	; 152
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	ce 01       	movw	r24, r28
 2ec:	87 59       	subi	r24, 0x97	; 151
 2ee:	9f 4f       	sbci	r25, 0xFF	; 255
 2f0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DS3231_GetDate>

		snprintf(buffer, sizeof(buffer),
 2f4:	ab 96       	adiw	r28, 0x2b	; 43
 2f6:	8f ad       	ldd	r24, Y+63	; 0x3f
 2f8:	ab 97       	sbiw	r28, 0x2b	; 43
 2fa:	1f 92       	push	r1
 2fc:	8f 93       	push	r24
 2fe:	ac 96       	adiw	r28, 0x2c	; 44
 300:	8f ad       	ldd	r24, Y+63	; 0x3f
 302:	ac 97       	sbiw	r28, 0x2c	; 44
 304:	1f 92       	push	r1
 306:	8f 93       	push	r24
 308:	ad 96       	adiw	r28, 0x2d	; 45
 30a:	8f ad       	ldd	r24, Y+63	; 0x3f
 30c:	ad 97       	sbiw	r28, 0x2d	; 45
 30e:	1f 92       	push	r1
 310:	8f 93       	push	r24
 312:	a8 96       	adiw	r28, 0x28	; 40
 314:	8f ad       	ldd	r24, Y+63	; 0x3f
 316:	a8 97       	sbiw	r28, 0x28	; 40
 318:	1f 92       	push	r1
 31a:	8f 93       	push	r24
 31c:	a9 96       	adiw	r28, 0x29	; 41
 31e:	8f ad       	ldd	r24, Y+63	; 0x3f
 320:	a9 97       	sbiw	r28, 0x29	; 41
 322:	1f 92       	push	r1
 324:	8f 93       	push	r24
 326:	aa 96       	adiw	r28, 0x2a	; 42
 328:	8f ad       	ldd	r24, Y+63	; 0x3f
 32a:	aa 97       	sbiw	r28, 0x2a	; 42
 32c:	1f 92       	push	r1
 32e:	8f 93       	push	r24
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	1f 92       	push	r1
 334:	8f 93       	push	r24
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	1f 92       	push	r1
 33a:	8f 93       	push	r24
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	1f 92       	push	r1
 346:	84 e6       	ldi	r24, 0x64	; 100
 348:	8f 93       	push	r24
 34a:	ce 01       	movw	r24, r28
 34c:	03 96       	adiw	r24, 0x03	; 3
 34e:	9f 93       	push	r25
 350:	8f 93       	push	r24
 352:	0e 94 3b 02 	call	0x476	; 0x476 <snprintf>
		"TEMP: %d°C HUM: %d%% FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n",
		temperature, humidity, day, month, year, hour, minute, second);

		if (Flag_SendData) {
 356:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Flag_SendData>
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	88 23       	and	r24, r24
 366:	21 f0       	breq	.+8      	; 0x370 <Task_TemHum+0xd4>
			SerialPort_Send_String(buffer);
 368:	ce 01       	movw	r24, r28
 36a:	03 96       	adiw	r24, 0x03	; 3
 36c:	0e 94 32 01 	call	0x264	; 0x264 <SerialPort_Send_String>
		}
	}
}
 370:	c4 59       	subi	r28, 0x94	; 148
 372:	df 4f       	sbci	r29, 0xFF	; 255
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <__vector_18>:

ISR(USART_RX_vect) {
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	static volatile uint8_t RX_Buffer = 0;
	RX_Buffer = UDR0; // Read received data
 3a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3aa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>

	if (RX_Buffer == 's' || RX_Buffer == 'S') {
 3ae:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 3b2:	83 37       	cpi	r24, 0x73	; 115
 3b4:	21 f0       	breq	.+8      	; 0x3be <__vector_18+0x3a>
 3b6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 3ba:	83 35       	cpi	r24, 0x53	; 83
 3bc:	79 f4       	brne	.+30     	; 0x3dc <__vector_18+0x58>
		Flag_SendData = !Flag_SendData; // Toggle data sending
 3be:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <Flag_SendData>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	91 11       	cpse	r25, r1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Flag_SendData>
		if (!Flag_SendData) {
 3cc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Flag_SendData>
 3d0:	81 11       	cpse	r24, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__vector_18+0x58>
			SerialPort_Send_String(msg2);
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 32 01 	call	0x264	; 0x264 <SerialPort_Send_String>
		}
	}
}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <Timer1_Init>:
 3fe:	e1 e8       	ldi	r30, 0x81	; 129
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	88 60       	ori	r24, 0x08	; 8
 406:	80 83       	st	Z, r24
 408:	81 e1       	ldi	r24, 0x11	; 17
 40a:	9a e7       	ldi	r25, 0x7A	; 122
 40c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 410:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 414:	af e6       	ldi	r26, 0x6F	; 111
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	8c 91       	ld	r24, X
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	8c 93       	st	X, r24
 41e:	80 81       	ld	r24, Z
 420:	85 60       	ori	r24, 0x05	; 5
 422:	80 83       	st	Z, r24
 424:	08 95       	ret

00000426 <__vector_11>:
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	8f 93       	push	r24
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <Flag_TemHum>
 438:	8f 91       	pop	r24
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <main>:
int main(void)
{
    // Inicializacion
	
	// Inicialización de los módulos
	SerialPort_Init(103); // 9600 bps con un reloj de 16MHz
 444:	87 e6       	ldi	r24, 0x67	; 103
 446:	0e 94 0e 01 	call	0x21c	; 0x21c <SerialPort_Init>
	SerialPort_TX_Enable();
 44a:	0e 94 18 01 	call	0x230	; 0x230 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 44e:	0e 94 1e 01 	call	0x23c	; 0x23c <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 452:	0e 94 24 01 	call	0x248	; 0x248 <SerialPort_RX_Interrupt_Enable>
	
	// Inicialización del Timer1
	Timer1_Init();
 456:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer1_Init>
	
	// inicializacion de dht11 y ds3231
	DHT11_Init();
 45a:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_Init>
	I2C_Init();	
 45e:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Init>
	
	sei();
 462:	78 94       	sei
	
    while (1) {
	    
		if (Flag_TemHum) {
 464:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <Flag_TemHum>
 468:	88 23       	and	r24, r24
 46a:	e1 f3       	breq	.-8      	; 0x464 <main+0x20>
		    Task_TemHum();
 46c:	0e 94 4e 01 	call	0x29c	; 0x29c <Task_TemHum>
		    Flag_TemHum = 0;
 470:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <Flag_TemHum>
 474:	f7 cf       	rjmp	.-18     	; 0x464 <main+0x20>

00000476 <snprintf>:
 476:	ae e0       	ldi	r26, 0x0E	; 14
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e1 e4       	ldi	r30, 0x41	; 65
 47c:	f2 e0       	ldi	r31, 0x02	; 2
 47e:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__prologue_saves__+0x1c>
 482:	0d 89       	ldd	r16, Y+21	; 0x15
 484:	1e 89       	ldd	r17, Y+22	; 0x16
 486:	8f 89       	ldd	r24, Y+23	; 0x17
 488:	98 8d       	ldd	r25, Y+24	; 0x18
 48a:	26 e0       	ldi	r18, 0x06	; 6
 48c:	2c 83       	std	Y+4, r18	; 0x04
 48e:	1a 83       	std	Y+2, r17	; 0x02
 490:	09 83       	std	Y+1, r16	; 0x01
 492:	97 ff       	sbrs	r25, 7
 494:	02 c0       	rjmp	.+4      	; 0x49a <snprintf+0x24>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e8       	ldi	r25, 0x80	; 128
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	9e 83       	std	Y+6, r25	; 0x06
 49e:	8d 83       	std	Y+5, r24	; 0x05
 4a0:	ae 01       	movw	r20, r28
 4a2:	45 5e       	subi	r20, 0xE5	; 229
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	69 8d       	ldd	r22, Y+25	; 0x19
 4a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vfprintf>
 4b2:	4d 81       	ldd	r20, Y+5	; 0x05
 4b4:	5e 81       	ldd	r21, Y+6	; 0x06
 4b6:	57 fd       	sbrc	r21, 7
 4b8:	0a c0       	rjmp	.+20     	; 0x4ce <snprintf+0x58>
 4ba:	2f 81       	ldd	r18, Y+7	; 0x07
 4bc:	38 85       	ldd	r19, Y+8	; 0x08
 4be:	42 17       	cp	r20, r18
 4c0:	53 07       	cpc	r21, r19
 4c2:	0c f4       	brge	.+2      	; 0x4c6 <snprintf+0x50>
 4c4:	9a 01       	movw	r18, r20
 4c6:	f8 01       	movw	r30, r16
 4c8:	e2 0f       	add	r30, r18
 4ca:	f3 1f       	adc	r31, r19
 4cc:	10 82       	st	Z, r1
 4ce:	2e 96       	adiw	r28, 0x0e	; 14
 4d0:	e4 e0       	ldi	r30, 0x04	; 4
 4d2:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__epilogue_restores__+0x1c>

000004d6 <vfprintf>:
 4d6:	ab e0       	ldi	r26, 0x0B	; 11
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e1 e7       	ldi	r30, 0x71	; 113
 4dc:	f2 e0       	ldi	r31, 0x02	; 2
 4de:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__prologue_saves__>
 4e2:	6c 01       	movw	r12, r24
 4e4:	7b 01       	movw	r14, r22
 4e6:	8a 01       	movw	r16, r20
 4e8:	fc 01       	movw	r30, r24
 4ea:	17 82       	std	Z+7, r1	; 0x07
 4ec:	16 82       	std	Z+6, r1	; 0x06
 4ee:	83 81       	ldd	r24, Z+3	; 0x03
 4f0:	81 ff       	sbrs	r24, 1
 4f2:	cc c1       	rjmp	.+920    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 4f4:	ce 01       	movw	r24, r28
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	3c 01       	movw	r6, r24
 4fa:	f6 01       	movw	r30, r12
 4fc:	93 81       	ldd	r25, Z+3	; 0x03
 4fe:	f7 01       	movw	r30, r14
 500:	93 fd       	sbrc	r25, 3
 502:	85 91       	lpm	r24, Z+
 504:	93 ff       	sbrs	r25, 3
 506:	81 91       	ld	r24, Z+
 508:	7f 01       	movw	r14, r30
 50a:	88 23       	and	r24, r24
 50c:	09 f4       	brne	.+2      	; 0x510 <vfprintf+0x3a>
 50e:	ba c1       	rjmp	.+884    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 510:	85 32       	cpi	r24, 0x25	; 37
 512:	39 f4       	brne	.+14     	; 0x522 <vfprintf+0x4c>
 514:	93 fd       	sbrc	r25, 3
 516:	85 91       	lpm	r24, Z+
 518:	93 ff       	sbrs	r25, 3
 51a:	81 91       	ld	r24, Z+
 51c:	7f 01       	movw	r14, r30
 51e:	85 32       	cpi	r24, 0x25	; 37
 520:	29 f4       	brne	.+10     	; 0x52c <vfprintf+0x56>
 522:	b6 01       	movw	r22, r12
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 52a:	e7 cf       	rjmp	.-50     	; 0x4fa <vfprintf+0x24>
 52c:	91 2c       	mov	r9, r1
 52e:	21 2c       	mov	r2, r1
 530:	31 2c       	mov	r3, r1
 532:	ff e1       	ldi	r31, 0x1F	; 31
 534:	f3 15       	cp	r31, r3
 536:	d8 f0       	brcs	.+54     	; 0x56e <vfprintf+0x98>
 538:	8b 32       	cpi	r24, 0x2B	; 43
 53a:	79 f0       	breq	.+30     	; 0x55a <vfprintf+0x84>
 53c:	38 f4       	brcc	.+14     	; 0x54c <vfprintf+0x76>
 53e:	80 32       	cpi	r24, 0x20	; 32
 540:	79 f0       	breq	.+30     	; 0x560 <vfprintf+0x8a>
 542:	83 32       	cpi	r24, 0x23	; 35
 544:	a1 f4       	brne	.+40     	; 0x56e <vfprintf+0x98>
 546:	23 2d       	mov	r18, r3
 548:	20 61       	ori	r18, 0x10	; 16
 54a:	1d c0       	rjmp	.+58     	; 0x586 <vfprintf+0xb0>
 54c:	8d 32       	cpi	r24, 0x2D	; 45
 54e:	61 f0       	breq	.+24     	; 0x568 <vfprintf+0x92>
 550:	80 33       	cpi	r24, 0x30	; 48
 552:	69 f4       	brne	.+26     	; 0x56e <vfprintf+0x98>
 554:	23 2d       	mov	r18, r3
 556:	21 60       	ori	r18, 0x01	; 1
 558:	16 c0       	rjmp	.+44     	; 0x586 <vfprintf+0xb0>
 55a:	83 2d       	mov	r24, r3
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	38 2e       	mov	r3, r24
 560:	e3 2d       	mov	r30, r3
 562:	e4 60       	ori	r30, 0x04	; 4
 564:	3e 2e       	mov	r3, r30
 566:	2a c0       	rjmp	.+84     	; 0x5bc <vfprintf+0xe6>
 568:	f3 2d       	mov	r31, r3
 56a:	f8 60       	ori	r31, 0x08	; 8
 56c:	1d c0       	rjmp	.+58     	; 0x5a8 <vfprintf+0xd2>
 56e:	37 fc       	sbrc	r3, 7
 570:	2d c0       	rjmp	.+90     	; 0x5cc <vfprintf+0xf6>
 572:	20 ed       	ldi	r18, 0xD0	; 208
 574:	28 0f       	add	r18, r24
 576:	2a 30       	cpi	r18, 0x0A	; 10
 578:	40 f0       	brcs	.+16     	; 0x58a <vfprintf+0xb4>
 57a:	8e 32       	cpi	r24, 0x2E	; 46
 57c:	b9 f4       	brne	.+46     	; 0x5ac <vfprintf+0xd6>
 57e:	36 fc       	sbrc	r3, 6
 580:	81 c1       	rjmp	.+770    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 582:	23 2d       	mov	r18, r3
 584:	20 64       	ori	r18, 0x40	; 64
 586:	32 2e       	mov	r3, r18
 588:	19 c0       	rjmp	.+50     	; 0x5bc <vfprintf+0xe6>
 58a:	36 fe       	sbrs	r3, 6
 58c:	06 c0       	rjmp	.+12     	; 0x59a <vfprintf+0xc4>
 58e:	8a e0       	ldi	r24, 0x0A	; 10
 590:	98 9e       	mul	r9, r24
 592:	20 0d       	add	r18, r0
 594:	11 24       	eor	r1, r1
 596:	92 2e       	mov	r9, r18
 598:	11 c0       	rjmp	.+34     	; 0x5bc <vfprintf+0xe6>
 59a:	ea e0       	ldi	r30, 0x0A	; 10
 59c:	2e 9e       	mul	r2, r30
 59e:	20 0d       	add	r18, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	22 2e       	mov	r2, r18
 5a4:	f3 2d       	mov	r31, r3
 5a6:	f0 62       	ori	r31, 0x20	; 32
 5a8:	3f 2e       	mov	r3, r31
 5aa:	08 c0       	rjmp	.+16     	; 0x5bc <vfprintf+0xe6>
 5ac:	8c 36       	cpi	r24, 0x6C	; 108
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <vfprintf+0xe2>
 5b0:	83 2d       	mov	r24, r3
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	38 2e       	mov	r3, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <vfprintf+0xe6>
 5b8:	88 36       	cpi	r24, 0x68	; 104
 5ba:	41 f4       	brne	.+16     	; 0x5cc <vfprintf+0xf6>
 5bc:	f7 01       	movw	r30, r14
 5be:	93 fd       	sbrc	r25, 3
 5c0:	85 91       	lpm	r24, Z+
 5c2:	93 ff       	sbrs	r25, 3
 5c4:	81 91       	ld	r24, Z+
 5c6:	7f 01       	movw	r14, r30
 5c8:	81 11       	cpse	r24, r1
 5ca:	b3 cf       	rjmp	.-154    	; 0x532 <vfprintf+0x5c>
 5cc:	98 2f       	mov	r25, r24
 5ce:	9f 7d       	andi	r25, 0xDF	; 223
 5d0:	95 54       	subi	r25, 0x45	; 69
 5d2:	93 30       	cpi	r25, 0x03	; 3
 5d4:	28 f4       	brcc	.+10     	; 0x5e0 <vfprintf+0x10a>
 5d6:	0c 5f       	subi	r16, 0xFC	; 252
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	9f e3       	ldi	r25, 0x3F	; 63
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <vfprintf+0x124>
 5e0:	83 36       	cpi	r24, 0x63	; 99
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <vfprintf+0x11a>
 5e4:	83 37       	cpi	r24, 0x73	; 115
 5e6:	71 f0       	breq	.+28     	; 0x604 <vfprintf+0x12e>
 5e8:	83 35       	cpi	r24, 0x53	; 83
 5ea:	09 f0       	breq	.+2      	; 0x5ee <vfprintf+0x118>
 5ec:	59 c0       	rjmp	.+178    	; 0x6a0 <vfprintf+0x1ca>
 5ee:	21 c0       	rjmp	.+66     	; 0x632 <vfprintf+0x15c>
 5f0:	f8 01       	movw	r30, r16
 5f2:	80 81       	ld	r24, Z
 5f4:	89 83       	std	Y+1, r24	; 0x01
 5f6:	0e 5f       	subi	r16, 0xFE	; 254
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
 5fa:	88 24       	eor	r8, r8
 5fc:	83 94       	inc	r8
 5fe:	91 2c       	mov	r9, r1
 600:	53 01       	movw	r10, r6
 602:	13 c0       	rjmp	.+38     	; 0x62a <vfprintf+0x154>
 604:	28 01       	movw	r4, r16
 606:	f2 e0       	ldi	r31, 0x02	; 2
 608:	4f 0e       	add	r4, r31
 60a:	51 1c       	adc	r5, r1
 60c:	f8 01       	movw	r30, r16
 60e:	a0 80       	ld	r10, Z
 610:	b1 80       	ldd	r11, Z+1	; 0x01
 612:	36 fe       	sbrs	r3, 6
 614:	03 c0       	rjmp	.+6      	; 0x61c <vfprintf+0x146>
 616:	69 2d       	mov	r22, r9
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0x14a>
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	7f ef       	ldi	r23, 0xFF	; 255
 620:	c5 01       	movw	r24, r10
 622:	0e 94 57 04 	call	0x8ae	; 0x8ae <strnlen>
 626:	4c 01       	movw	r8, r24
 628:	82 01       	movw	r16, r4
 62a:	f3 2d       	mov	r31, r3
 62c:	ff 77       	andi	r31, 0x7F	; 127
 62e:	3f 2e       	mov	r3, r31
 630:	16 c0       	rjmp	.+44     	; 0x65e <vfprintf+0x188>
 632:	28 01       	movw	r4, r16
 634:	22 e0       	ldi	r18, 0x02	; 2
 636:	42 0e       	add	r4, r18
 638:	51 1c       	adc	r5, r1
 63a:	f8 01       	movw	r30, r16
 63c:	a0 80       	ld	r10, Z
 63e:	b1 80       	ldd	r11, Z+1	; 0x01
 640:	36 fe       	sbrs	r3, 6
 642:	03 c0       	rjmp	.+6      	; 0x64a <vfprintf+0x174>
 644:	69 2d       	mov	r22, r9
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <vfprintf+0x178>
 64a:	6f ef       	ldi	r22, 0xFF	; 255
 64c:	7f ef       	ldi	r23, 0xFF	; 255
 64e:	c5 01       	movw	r24, r10
 650:	0e 94 4c 04 	call	0x898	; 0x898 <strnlen_P>
 654:	4c 01       	movw	r8, r24
 656:	f3 2d       	mov	r31, r3
 658:	f0 68       	ori	r31, 0x80	; 128
 65a:	3f 2e       	mov	r3, r31
 65c:	82 01       	movw	r16, r4
 65e:	33 fc       	sbrc	r3, 3
 660:	1b c0       	rjmp	.+54     	; 0x698 <vfprintf+0x1c2>
 662:	82 2d       	mov	r24, r2
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	88 16       	cp	r8, r24
 668:	99 06       	cpc	r9, r25
 66a:	b0 f4       	brcc	.+44     	; 0x698 <vfprintf+0x1c2>
 66c:	b6 01       	movw	r22, r12
 66e:	80 e2       	ldi	r24, 0x20	; 32
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 676:	2a 94       	dec	r2
 678:	f4 cf       	rjmp	.-24     	; 0x662 <vfprintf+0x18c>
 67a:	f5 01       	movw	r30, r10
 67c:	37 fc       	sbrc	r3, 7
 67e:	85 91       	lpm	r24, Z+
 680:	37 fe       	sbrs	r3, 7
 682:	81 91       	ld	r24, Z+
 684:	5f 01       	movw	r10, r30
 686:	b6 01       	movw	r22, r12
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 68e:	21 10       	cpse	r2, r1
 690:	2a 94       	dec	r2
 692:	21 e0       	ldi	r18, 0x01	; 1
 694:	82 1a       	sub	r8, r18
 696:	91 08       	sbc	r9, r1
 698:	81 14       	cp	r8, r1
 69a:	91 04       	cpc	r9, r1
 69c:	71 f7       	brne	.-36     	; 0x67a <vfprintf+0x1a4>
 69e:	e8 c0       	rjmp	.+464    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 6a0:	84 36       	cpi	r24, 0x64	; 100
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <vfprintf+0x1d2>
 6a4:	89 36       	cpi	r24, 0x69	; 105
 6a6:	41 f5       	brne	.+80     	; 0x6f8 <vfprintf+0x222>
 6a8:	f8 01       	movw	r30, r16
 6aa:	37 fe       	sbrs	r3, 7
 6ac:	07 c0       	rjmp	.+14     	; 0x6bc <vfprintf+0x1e6>
 6ae:	60 81       	ld	r22, Z
 6b0:	71 81       	ldd	r23, Z+1	; 0x01
 6b2:	82 81       	ldd	r24, Z+2	; 0x02
 6b4:	93 81       	ldd	r25, Z+3	; 0x03
 6b6:	0c 5f       	subi	r16, 0xFC	; 252
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	08 c0       	rjmp	.+16     	; 0x6cc <vfprintf+0x1f6>
 6bc:	60 81       	ld	r22, Z
 6be:	71 81       	ldd	r23, Z+1	; 0x01
 6c0:	07 2e       	mov	r0, r23
 6c2:	00 0c       	add	r0, r0
 6c4:	88 0b       	sbc	r24, r24
 6c6:	99 0b       	sbc	r25, r25
 6c8:	0e 5f       	subi	r16, 0xFE	; 254
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	f3 2d       	mov	r31, r3
 6ce:	ff 76       	andi	r31, 0x6F	; 111
 6d0:	3f 2e       	mov	r3, r31
 6d2:	97 ff       	sbrs	r25, 7
 6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <vfprintf+0x212>
 6d6:	90 95       	com	r25
 6d8:	80 95       	com	r24
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	f0 68       	ori	r31, 0x80	; 128
 6e6:	3f 2e       	mov	r3, r31
 6e8:	2a e0       	ldi	r18, 0x0A	; 10
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	a3 01       	movw	r20, r6
 6ee:	0e 94 9e 04 	call	0x93c	; 0x93c <__ultoa_invert>
 6f2:	88 2e       	mov	r8, r24
 6f4:	86 18       	sub	r8, r6
 6f6:	45 c0       	rjmp	.+138    	; 0x782 <vfprintf+0x2ac>
 6f8:	85 37       	cpi	r24, 0x75	; 117
 6fa:	31 f4       	brne	.+12     	; 0x708 <vfprintf+0x232>
 6fc:	23 2d       	mov	r18, r3
 6fe:	2f 7e       	andi	r18, 0xEF	; 239
 700:	b2 2e       	mov	r11, r18
 702:	2a e0       	ldi	r18, 0x0A	; 10
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	25 c0       	rjmp	.+74     	; 0x752 <vfprintf+0x27c>
 708:	93 2d       	mov	r25, r3
 70a:	99 7f       	andi	r25, 0xF9	; 249
 70c:	b9 2e       	mov	r11, r25
 70e:	8f 36       	cpi	r24, 0x6F	; 111
 710:	c1 f0       	breq	.+48     	; 0x742 <vfprintf+0x26c>
 712:	18 f4       	brcc	.+6      	; 0x71a <vfprintf+0x244>
 714:	88 35       	cpi	r24, 0x58	; 88
 716:	79 f0       	breq	.+30     	; 0x736 <vfprintf+0x260>
 718:	b5 c0       	rjmp	.+362    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 71a:	80 37       	cpi	r24, 0x70	; 112
 71c:	19 f0       	breq	.+6      	; 0x724 <vfprintf+0x24e>
 71e:	88 37       	cpi	r24, 0x78	; 120
 720:	21 f0       	breq	.+8      	; 0x72a <vfprintf+0x254>
 722:	b0 c0       	rjmp	.+352    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 724:	e9 2f       	mov	r30, r25
 726:	e0 61       	ori	r30, 0x10	; 16
 728:	be 2e       	mov	r11, r30
 72a:	b4 fe       	sbrs	r11, 4
 72c:	0d c0       	rjmp	.+26     	; 0x748 <vfprintf+0x272>
 72e:	fb 2d       	mov	r31, r11
 730:	f4 60       	ori	r31, 0x04	; 4
 732:	bf 2e       	mov	r11, r31
 734:	09 c0       	rjmp	.+18     	; 0x748 <vfprintf+0x272>
 736:	34 fe       	sbrs	r3, 4
 738:	0a c0       	rjmp	.+20     	; 0x74e <vfprintf+0x278>
 73a:	29 2f       	mov	r18, r25
 73c:	26 60       	ori	r18, 0x06	; 6
 73e:	b2 2e       	mov	r11, r18
 740:	06 c0       	rjmp	.+12     	; 0x74e <vfprintf+0x278>
 742:	28 e0       	ldi	r18, 0x08	; 8
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	05 c0       	rjmp	.+10     	; 0x752 <vfprintf+0x27c>
 748:	20 e1       	ldi	r18, 0x10	; 16
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0x27c>
 74e:	20 e1       	ldi	r18, 0x10	; 16
 750:	32 e0       	ldi	r19, 0x02	; 2
 752:	f8 01       	movw	r30, r16
 754:	b7 fe       	sbrs	r11, 7
 756:	07 c0       	rjmp	.+14     	; 0x766 <vfprintf+0x290>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	82 81       	ldd	r24, Z+2	; 0x02
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	0c 5f       	subi	r16, 0xFC	; 252
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	06 c0       	rjmp	.+12     	; 0x772 <vfprintf+0x29c>
 766:	60 81       	ld	r22, Z
 768:	71 81       	ldd	r23, Z+1	; 0x01
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 5f       	subi	r16, 0xFE	; 254
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	a3 01       	movw	r20, r6
 774:	0e 94 9e 04 	call	0x93c	; 0x93c <__ultoa_invert>
 778:	88 2e       	mov	r8, r24
 77a:	86 18       	sub	r8, r6
 77c:	fb 2d       	mov	r31, r11
 77e:	ff 77       	andi	r31, 0x7F	; 127
 780:	3f 2e       	mov	r3, r31
 782:	36 fe       	sbrs	r3, 6
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <vfprintf+0x2ca>
 786:	23 2d       	mov	r18, r3
 788:	2e 7f       	andi	r18, 0xFE	; 254
 78a:	a2 2e       	mov	r10, r18
 78c:	89 14       	cp	r8, r9
 78e:	58 f4       	brcc	.+22     	; 0x7a6 <vfprintf+0x2d0>
 790:	34 fe       	sbrs	r3, 4
 792:	0b c0       	rjmp	.+22     	; 0x7aa <vfprintf+0x2d4>
 794:	32 fc       	sbrc	r3, 2
 796:	09 c0       	rjmp	.+18     	; 0x7aa <vfprintf+0x2d4>
 798:	83 2d       	mov	r24, r3
 79a:	8e 7e       	andi	r24, 0xEE	; 238
 79c:	a8 2e       	mov	r10, r24
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <vfprintf+0x2d4>
 7a0:	b8 2c       	mov	r11, r8
 7a2:	a3 2c       	mov	r10, r3
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x2d6>
 7a6:	b8 2c       	mov	r11, r8
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <vfprintf+0x2d6>
 7aa:	b9 2c       	mov	r11, r9
 7ac:	a4 fe       	sbrs	r10, 4
 7ae:	0f c0       	rjmp	.+30     	; 0x7ce <vfprintf+0x2f8>
 7b0:	fe 01       	movw	r30, r28
 7b2:	e8 0d       	add	r30, r8
 7b4:	f1 1d       	adc	r31, r1
 7b6:	80 81       	ld	r24, Z
 7b8:	80 33       	cpi	r24, 0x30	; 48
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <vfprintf+0x2ee>
 7bc:	9a 2d       	mov	r25, r10
 7be:	99 7e       	andi	r25, 0xE9	; 233
 7c0:	a9 2e       	mov	r10, r25
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <vfprintf+0x300>
 7c4:	a2 fe       	sbrs	r10, 2
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <vfprintf+0x2fe>
 7c8:	b3 94       	inc	r11
 7ca:	b3 94       	inc	r11
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <vfprintf+0x300>
 7ce:	8a 2d       	mov	r24, r10
 7d0:	86 78       	andi	r24, 0x86	; 134
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <vfprintf+0x300>
 7d4:	b3 94       	inc	r11
 7d6:	a3 fc       	sbrc	r10, 3
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <vfprintf+0x326>
 7da:	a0 fe       	sbrs	r10, 0
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x314>
 7de:	b2 14       	cp	r11, r2
 7e0:	88 f4       	brcc	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e2:	28 0c       	add	r2, r8
 7e4:	92 2c       	mov	r9, r2
 7e6:	9b 18       	sub	r9, r11
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ea:	b2 14       	cp	r11, r2
 7ec:	60 f4       	brcc	.+24     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ee:	b6 01       	movw	r22, r12
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 7f8:	b3 94       	inc	r11
 7fa:	f7 cf       	rjmp	.-18     	; 0x7ea <vfprintf+0x314>
 7fc:	b2 14       	cp	r11, r2
 7fe:	18 f4       	brcc	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	2b 18       	sub	r2, r11
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	98 2c       	mov	r9, r8
 806:	21 2c       	mov	r2, r1
 808:	a4 fe       	sbrs	r10, 4
 80a:	10 c0       	rjmp	.+32     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e3       	ldi	r24, 0x30	; 48
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 816:	a2 fe       	sbrs	r10, 2
 818:	17 c0       	rjmp	.+46     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 81a:	a1 fc       	sbrc	r10, 1
 81c:	03 c0       	rjmp	.+6      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81e:	88 e7       	ldi	r24, 0x78	; 120
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	88 e5       	ldi	r24, 0x58	; 88
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	b6 01       	movw	r22, r12
 82a:	0c c0       	rjmp	.+24     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 82c:	8a 2d       	mov	r24, r10
 82e:	86 78       	andi	r24, 0x86	; 134
 830:	59 f0       	breq	.+22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 832:	a1 fe       	sbrs	r10, 1
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	8b e2       	ldi	r24, 0x2B	; 43
 838:	01 c0       	rjmp	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	a7 fc       	sbrc	r10, 7
 83e:	8d e2       	ldi	r24, 0x2D	; 45
 840:	b6 01       	movw	r22, r12
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 848:	89 14       	cp	r8, r9
 84a:	38 f4       	brcc	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84c:	b6 01       	movw	r22, r12
 84e:	80 e3       	ldi	r24, 0x30	; 48
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 856:	9a 94       	dec	r9
 858:	f7 cf       	rjmp	.-18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 85a:	8a 94       	dec	r8
 85c:	f3 01       	movw	r30, r6
 85e:	e8 0d       	add	r30, r8
 860:	f1 1d       	adc	r31, r1
 862:	80 81       	ld	r24, Z
 864:	b6 01       	movw	r22, r12
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 86c:	81 10       	cpse	r8, r1
 86e:	f5 cf       	rjmp	.-22     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 870:	22 20       	and	r2, r2
 872:	09 f4       	brne	.+2      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 874:	42 ce       	rjmp	.-892    	; 0x4fa <vfprintf+0x24>
 876:	b6 01       	movw	r22, r12
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <fputc>
 880:	2a 94       	dec	r2
 882:	f6 cf       	rjmp	.-20     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 884:	f6 01       	movw	r30, r12
 886:	86 81       	ldd	r24, Z+6	; 0x06
 888:	97 81       	ldd	r25, Z+7	; 0x07
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	9f ef       	ldi	r25, 0xFF	; 255
 890:	2b 96       	adiw	r28, 0x0b	; 11
 892:	e2 e1       	ldi	r30, 0x12	; 18
 894:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__epilogue_restores__>

00000898 <strnlen_P>:
 898:	fc 01       	movw	r30, r24
 89a:	05 90       	lpm	r0, Z+
 89c:	61 50       	subi	r22, 0x01	; 1
 89e:	70 40       	sbci	r23, 0x00	; 0
 8a0:	01 10       	cpse	r0, r1
 8a2:	d8 f7       	brcc	.-10     	; 0x89a <strnlen_P+0x2>
 8a4:	80 95       	com	r24
 8a6:	90 95       	com	r25
 8a8:	8e 0f       	add	r24, r30
 8aa:	9f 1f       	adc	r25, r31
 8ac:	08 95       	ret

000008ae <strnlen>:
 8ae:	fc 01       	movw	r30, r24
 8b0:	61 50       	subi	r22, 0x01	; 1
 8b2:	70 40       	sbci	r23, 0x00	; 0
 8b4:	01 90       	ld	r0, Z+
 8b6:	01 10       	cpse	r0, r1
 8b8:	d8 f7       	brcc	.-10     	; 0x8b0 <strnlen+0x2>
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	8e 0f       	add	r24, r30
 8c0:	9f 1f       	adc	r25, r31
 8c2:	08 95       	ret

000008c4 <fputc>:
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	fb 01       	movw	r30, r22
 8ce:	23 81       	ldd	r18, Z+3	; 0x03
 8d0:	21 fd       	sbrc	r18, 1
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <fputc+0x16>
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	9f ef       	ldi	r25, 0xFF	; 255
 8d8:	2c c0       	rjmp	.+88     	; 0x932 <__stack+0x33>
 8da:	22 ff       	sbrs	r18, 2
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <__stack+0xb>
 8de:	46 81       	ldd	r20, Z+6	; 0x06
 8e0:	57 81       	ldd	r21, Z+7	; 0x07
 8e2:	24 81       	ldd	r18, Z+4	; 0x04
 8e4:	35 81       	ldd	r19, Z+5	; 0x05
 8e6:	42 17       	cp	r20, r18
 8e8:	53 07       	cpc	r21, r19
 8ea:	44 f4       	brge	.+16     	; 0x8fc <fputc+0x38>
 8ec:	a0 81       	ld	r26, Z
 8ee:	b1 81       	ldd	r27, Z+1	; 0x01
 8f0:	9d 01       	movw	r18, r26
 8f2:	2f 5f       	subi	r18, 0xFF	; 255
 8f4:	3f 4f       	sbci	r19, 0xFF	; 255
 8f6:	31 83       	std	Z+1, r19	; 0x01
 8f8:	20 83       	st	Z, r18
 8fa:	8c 93       	st	X, r24
 8fc:	26 81       	ldd	r18, Z+6	; 0x06
 8fe:	37 81       	ldd	r19, Z+7	; 0x07
 900:	2f 5f       	subi	r18, 0xFF	; 255
 902:	3f 4f       	sbci	r19, 0xFF	; 255
 904:	37 83       	std	Z+7, r19	; 0x07
 906:	26 83       	std	Z+6, r18	; 0x06
 908:	14 c0       	rjmp	.+40     	; 0x932 <__stack+0x33>
 90a:	8b 01       	movw	r16, r22
 90c:	ec 01       	movw	r28, r24
 90e:	fb 01       	movw	r30, r22
 910:	00 84       	ldd	r0, Z+8	; 0x08
 912:	f1 85       	ldd	r31, Z+9	; 0x09
 914:	e0 2d       	mov	r30, r0
 916:	09 95       	icall
 918:	89 2b       	or	r24, r25
 91a:	e1 f6       	brne	.-72     	; 0x8d4 <fputc+0x10>
 91c:	d8 01       	movw	r26, r16
 91e:	16 96       	adiw	r26, 0x06	; 6
 920:	8d 91       	ld	r24, X+
 922:	9c 91       	ld	r25, X
 924:	17 97       	sbiw	r26, 0x07	; 7
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	17 96       	adiw	r26, 0x07	; 7
 92a:	9c 93       	st	X, r25
 92c:	8e 93       	st	-X, r24
 92e:	16 97       	sbiw	r26, 0x06	; 6
 930:	ce 01       	movw	r24, r28
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	1f 91       	pop	r17
 938:	0f 91       	pop	r16
 93a:	08 95       	ret

0000093c <__ultoa_invert>:
 93c:	fa 01       	movw	r30, r20
 93e:	aa 27       	eor	r26, r26
 940:	28 30       	cpi	r18, 0x08	; 8
 942:	51 f1       	breq	.+84     	; 0x998 <__ultoa_invert+0x5c>
 944:	20 31       	cpi	r18, 0x10	; 16
 946:	81 f1       	breq	.+96     	; 0x9a8 <__ultoa_invert+0x6c>
 948:	e8 94       	clt
 94a:	6f 93       	push	r22
 94c:	6e 7f       	andi	r22, 0xFE	; 254
 94e:	6e 5f       	subi	r22, 0xFE	; 254
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	af 4f       	sbci	r26, 0xFF	; 255
 958:	b1 e0       	ldi	r27, 0x01	; 1
 95a:	3e d0       	rcall	.+124    	; 0x9d8 <__ultoa_invert+0x9c>
 95c:	b4 e0       	ldi	r27, 0x04	; 4
 95e:	3c d0       	rcall	.+120    	; 0x9d8 <__ultoa_invert+0x9c>
 960:	67 0f       	add	r22, r23
 962:	78 1f       	adc	r23, r24
 964:	89 1f       	adc	r24, r25
 966:	9a 1f       	adc	r25, r26
 968:	a1 1d       	adc	r26, r1
 96a:	68 0f       	add	r22, r24
 96c:	79 1f       	adc	r23, r25
 96e:	8a 1f       	adc	r24, r26
 970:	91 1d       	adc	r25, r1
 972:	a1 1d       	adc	r26, r1
 974:	6a 0f       	add	r22, r26
 976:	71 1d       	adc	r23, r1
 978:	81 1d       	adc	r24, r1
 97a:	91 1d       	adc	r25, r1
 97c:	a1 1d       	adc	r26, r1
 97e:	20 d0       	rcall	.+64     	; 0x9c0 <__ultoa_invert+0x84>
 980:	09 f4       	brne	.+2      	; 0x984 <__ultoa_invert+0x48>
 982:	68 94       	set
 984:	3f 91       	pop	r19
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	26 9f       	mul	r18, r22
 98a:	11 24       	eor	r1, r1
 98c:	30 19       	sub	r19, r0
 98e:	30 5d       	subi	r19, 0xD0	; 208
 990:	31 93       	st	Z+, r19
 992:	de f6       	brtc	.-74     	; 0x94a <__ultoa_invert+0xe>
 994:	cf 01       	movw	r24, r30
 996:	08 95       	ret
 998:	46 2f       	mov	r20, r22
 99a:	47 70       	andi	r20, 0x07	; 7
 99c:	40 5d       	subi	r20, 0xD0	; 208
 99e:	41 93       	st	Z+, r20
 9a0:	b3 e0       	ldi	r27, 0x03	; 3
 9a2:	0f d0       	rcall	.+30     	; 0x9c2 <__ultoa_invert+0x86>
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__ultoa_invert+0x5c>
 9a6:	f6 cf       	rjmp	.-20     	; 0x994 <__ultoa_invert+0x58>
 9a8:	46 2f       	mov	r20, r22
 9aa:	4f 70       	andi	r20, 0x0F	; 15
 9ac:	40 5d       	subi	r20, 0xD0	; 208
 9ae:	4a 33       	cpi	r20, 0x3A	; 58
 9b0:	18 f0       	brcs	.+6      	; 0x9b8 <__ultoa_invert+0x7c>
 9b2:	49 5d       	subi	r20, 0xD9	; 217
 9b4:	31 fd       	sbrc	r19, 1
 9b6:	40 52       	subi	r20, 0x20	; 32
 9b8:	41 93       	st	Z+, r20
 9ba:	02 d0       	rcall	.+4      	; 0x9c0 <__ultoa_invert+0x84>
 9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__ultoa_invert+0x6c>
 9be:	ea cf       	rjmp	.-44     	; 0x994 <__ultoa_invert+0x58>
 9c0:	b4 e0       	ldi	r27, 0x04	; 4
 9c2:	a6 95       	lsr	r26
 9c4:	97 95       	ror	r25
 9c6:	87 95       	ror	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	ba 95       	dec	r27
 9ce:	c9 f7       	brne	.-14     	; 0x9c2 <__ultoa_invert+0x86>
 9d0:	00 97       	sbiw	r24, 0x00	; 0
 9d2:	61 05       	cpc	r22, r1
 9d4:	71 05       	cpc	r23, r1
 9d6:	08 95       	ret
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	0a 2e       	mov	r0, r26
 9de:	06 94       	lsr	r0
 9e0:	57 95       	ror	r21
 9e2:	47 95       	ror	r20
 9e4:	37 95       	ror	r19
 9e6:	27 95       	ror	r18
 9e8:	ba 95       	dec	r27
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__ultoa_invert+0xa2>
 9ec:	62 0f       	add	r22, r18
 9ee:	73 1f       	adc	r23, r19
 9f0:	84 1f       	adc	r24, r20
 9f2:	95 1f       	adc	r25, r21
 9f4:	a0 1d       	adc	r26, r0
 9f6:	08 95       	ret

000009f8 <__prologue_saves__>:
 9f8:	2f 92       	push	r2
 9fa:	3f 92       	push	r3
 9fc:	4f 92       	push	r4
 9fe:	5f 92       	push	r5
 a00:	6f 92       	push	r6
 a02:	7f 92       	push	r7
 a04:	8f 92       	push	r8
 a06:	9f 92       	push	r9
 a08:	af 92       	push	r10
 a0a:	bf 92       	push	r11
 a0c:	cf 92       	push	r12
 a0e:	df 92       	push	r13
 a10:	ef 92       	push	r14
 a12:	ff 92       	push	r15
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
 a20:	ca 1b       	sub	r28, r26
 a22:	db 0b       	sbc	r29, r27
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	f8 94       	cli
 a28:	de bf       	out	0x3e, r29	; 62
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	cd bf       	out	0x3d, r28	; 61
 a2e:	09 94       	ijmp

00000a30 <__epilogue_restores__>:
 a30:	2a 88       	ldd	r2, Y+18	; 0x12
 a32:	39 88       	ldd	r3, Y+17	; 0x11
 a34:	48 88       	ldd	r4, Y+16	; 0x10
 a36:	5f 84       	ldd	r5, Y+15	; 0x0f
 a38:	6e 84       	ldd	r6, Y+14	; 0x0e
 a3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a40:	aa 84       	ldd	r10, Y+10	; 0x0a
 a42:	b9 84       	ldd	r11, Y+9	; 0x09
 a44:	c8 84       	ldd	r12, Y+8	; 0x08
 a46:	df 80       	ldd	r13, Y+7	; 0x07
 a48:	ee 80       	ldd	r14, Y+6	; 0x06
 a4a:	fd 80       	ldd	r15, Y+5	; 0x05
 a4c:	0c 81       	ldd	r16, Y+4	; 0x04
 a4e:	1b 81       	ldd	r17, Y+3	; 0x03
 a50:	aa 81       	ldd	r26, Y+2	; 0x02
 a52:	b9 81       	ldd	r27, Y+1	; 0x01
 a54:	ce 0f       	add	r28, r30
 a56:	d1 1d       	adc	r29, r1
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	ed 01       	movw	r28, r26
 a64:	08 95       	ret

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>
